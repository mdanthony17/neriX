# Makefile.in generated by automake 1.10.3 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/xerawdp
pkglibdir = $(libdir)/xerawdp
pkgincludedir = $(includedir)/xerawdp
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = xerawdp$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_xerawdp_OBJECTS = xerawdp-RawData.$(OBJEXT) \
	xerawdp-RawDataController.$(OBJEXT) xerawdp-Waveform.$(OBJEXT) \
	xerawdp-Filter.$(OBJEXT) xerawdp-PeakFinder.$(OBJEXT) \
	xerawdp-EventData.$(OBJEXT) \
	xerawdp-PositionReconstruction.$(OBJEXT) \
	xerawdp-SignalCorrections.$(OBJEXT) \
	xerawdp-SignalFitter.$(OBJEXT) \
	xerawdp-AnalysisManager.$(OBJEXT) \
	xerawdp-RawDataProcessor.$(OBJEXT) xerawdp-XmlConfig.$(OBJEXT) \
	xerawdp-xerawdp.$(OBJEXT)
nodist_xerawdp_OBJECTS = xerawdp-VectorDict.$(OBJEXT)
xerawdp_OBJECTS = $(am_xerawdp_OBJECTS) $(nodist_xerawdp_OBJECTS)
am__DEPENDENCIES_1 =
xerawdp_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(xerawdp_SOURCES) $(nodist_xerawdp_SOURCES)
DIST_SOURCES = $(xerawdp_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/nerix/xerawdp-0.3.4/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/nerix/xerawdp-0.3.4/missing --run tar
AUTOCONF = ${SHELL} /home/nerix/xerawdp-0.3.4/missing --run autoconf
AUTOHEADER = ${SHELL} /home/nerix/xerawdp-0.3.4/missing --run autoheader
AUTOMAKE = ${SHELL} /home/nerix/xerawdp-0.3.4/missing --run automake-1.10
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LAPACK_CFLAGS =  
LAPACK_LIBS = -llapack -lblas  
LDFLAGS = 
LIBCHI2_CFLAGS = -I/usr/local/include/libchi2-1  
LIBCHI2_LIBS = -L/usr/local/lib -lchi2-1  
LIBFANN_CFLAGS = -I/usr/local/include  
LIBFANN_LIBS = -L/usr/local/lib -lm -lfann  
LIBOBJS = 
LIBS = -lnn -lxdio -lfftw3 
LIBXMLPP_CFLAGS = -I/usr/include/libxml2 -I/usr/include/glibmm-2.4 -I/usr/lib/x86_64-linux-gnu/glibmm-2.4/include -I/usr/include/sigc++-2.0 -I/usr/lib/x86_64-linux-gnu/sigc++-2.0/include -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/libxml++-2.6 -I/usr/lib/libxml++-2.6/include  
LIBXMLPP_LIBS = -lxml++-2.6 -lxml2 -lglibmm-2.4 -lgobject-2.0 -lsigc-2.0 -lglib-2.0  
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/nerix/xerawdp-0.3.4/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = xerawdp
PACKAGE_BUGREPORT = guillaume.plante@astro.columbia.edu
PACKAGE_NAME = xerawdp
PACKAGE_STRING = xerawdp 0.3.3_alpha04
PACKAGE_TARNAME = xerawdp
PACKAGE_URL = 
PACKAGE_VERSION = 0.3.3_alpha04
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
PYTHON = /usr/bin/python
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_PLATFORM = linux2
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 2.7
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
VERSION = 0.3.3_alpha04
abs_builddir = /home/nerix/xerawdp-0.3.4/src
abs_srcdir = /home/nerix/xerawdp-0.3.4/src
abs_top_builddir = /home/nerix/xerawdp-0.3.4
abs_top_srcdir = /home/nerix/xerawdp-0.3.4
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/nerix/xerawdp-0.3.4/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
pkgpyexecdir = ${pyexecdir}/xerawdp
pkgpythondir = ${pythondir}/xerawdp
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
pyexecdir = ${exec_prefix}/lib/python2.7/site-packages
pythondir = ${prefix}/lib/python2.7/site-packages
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
xerawdp_SOURCES = RawData.cpp RawData.h RawDataController.cpp RawDataController.h \
	Waveform.cpp Waveform.h Filter.cpp Filter.h PeakFinder.cpp PeakFinder.h \
	EventData.cpp EventData.h PositionReconstruction.cpp PositionReconstruction.h \
	SignalCorrections.cpp SignalCorrections.h SignalFitter.cpp SignalFitter.h \
	AnalysisManager.cpp AnalysisManager.h RawDataProcessor.cpp RawDataProcessor.h \
	XmlConfig.cpp XmlConfig.h \
	xerawdp.cpp xerawdp.h

nodist_xerawdp_SOURCES = VectorDict.cpp
xerawdp_LDADD = $(LIBXMLPP_LIBS) $(LIBCHI2_LIBS) $(LAPACK_LIBS) $(LIBFANN_LIBS) \
	-L/usr/local/lib/root -lCore -lCint -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lTree -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lGui -lCore -lCint -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lTree -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread

xerawdp_CPPFLAGS = $(LIBXMLPP_CFLAGS) $(LIBCHI2_CFLAGS) $(LAPACK_CFLAGS) $(LIBFANN_CFLAGS) \
	-I/usr/local/include/root

BUILT_SOURCES = LinkDef.h Vector.h VectorDict.cpp VectorDict.h
CLEANFILES = LinkDef.h Vector.h VectorDict.cpp VectorDict.h
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
xerawdp$(EXEEXT): $(xerawdp_OBJECTS) $(xerawdp_DEPENDENCIES) 
	@rm -f xerawdp$(EXEEXT)
	$(CXXLINK) $(xerawdp_OBJECTS) $(xerawdp_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/xerawdp-AnalysisManager.Po
include ./$(DEPDIR)/xerawdp-EventData.Po
include ./$(DEPDIR)/xerawdp-Filter.Po
include ./$(DEPDIR)/xerawdp-PeakFinder.Po
include ./$(DEPDIR)/xerawdp-PositionReconstruction.Po
include ./$(DEPDIR)/xerawdp-RawData.Po
include ./$(DEPDIR)/xerawdp-RawDataController.Po
include ./$(DEPDIR)/xerawdp-RawDataProcessor.Po
include ./$(DEPDIR)/xerawdp-SignalCorrections.Po
include ./$(DEPDIR)/xerawdp-SignalFitter.Po
include ./$(DEPDIR)/xerawdp-VectorDict.Po
include ./$(DEPDIR)/xerawdp-Waveform.Po
include ./$(DEPDIR)/xerawdp-XmlConfig.Po
include ./$(DEPDIR)/xerawdp-xerawdp.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

xerawdp-RawData.o: RawData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-RawData.o -MD -MP -MF $(DEPDIR)/xerawdp-RawData.Tpo -c -o xerawdp-RawData.o `test -f 'RawData.cpp' || echo '$(srcdir)/'`RawData.cpp
	mv -f $(DEPDIR)/xerawdp-RawData.Tpo $(DEPDIR)/xerawdp-RawData.Po
#	source='RawData.cpp' object='xerawdp-RawData.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-RawData.o `test -f 'RawData.cpp' || echo '$(srcdir)/'`RawData.cpp

xerawdp-RawData.obj: RawData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-RawData.obj -MD -MP -MF $(DEPDIR)/xerawdp-RawData.Tpo -c -o xerawdp-RawData.obj `if test -f 'RawData.cpp'; then $(CYGPATH_W) 'RawData.cpp'; else $(CYGPATH_W) '$(srcdir)/RawData.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-RawData.Tpo $(DEPDIR)/xerawdp-RawData.Po
#	source='RawData.cpp' object='xerawdp-RawData.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-RawData.obj `if test -f 'RawData.cpp'; then $(CYGPATH_W) 'RawData.cpp'; else $(CYGPATH_W) '$(srcdir)/RawData.cpp'; fi`

xerawdp-RawDataController.o: RawDataController.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-RawDataController.o -MD -MP -MF $(DEPDIR)/xerawdp-RawDataController.Tpo -c -o xerawdp-RawDataController.o `test -f 'RawDataController.cpp' || echo '$(srcdir)/'`RawDataController.cpp
	mv -f $(DEPDIR)/xerawdp-RawDataController.Tpo $(DEPDIR)/xerawdp-RawDataController.Po
#	source='RawDataController.cpp' object='xerawdp-RawDataController.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-RawDataController.o `test -f 'RawDataController.cpp' || echo '$(srcdir)/'`RawDataController.cpp

xerawdp-RawDataController.obj: RawDataController.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-RawDataController.obj -MD -MP -MF $(DEPDIR)/xerawdp-RawDataController.Tpo -c -o xerawdp-RawDataController.obj `if test -f 'RawDataController.cpp'; then $(CYGPATH_W) 'RawDataController.cpp'; else $(CYGPATH_W) '$(srcdir)/RawDataController.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-RawDataController.Tpo $(DEPDIR)/xerawdp-RawDataController.Po
#	source='RawDataController.cpp' object='xerawdp-RawDataController.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-RawDataController.obj `if test -f 'RawDataController.cpp'; then $(CYGPATH_W) 'RawDataController.cpp'; else $(CYGPATH_W) '$(srcdir)/RawDataController.cpp'; fi`

xerawdp-Waveform.o: Waveform.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-Waveform.o -MD -MP -MF $(DEPDIR)/xerawdp-Waveform.Tpo -c -o xerawdp-Waveform.o `test -f 'Waveform.cpp' || echo '$(srcdir)/'`Waveform.cpp
	mv -f $(DEPDIR)/xerawdp-Waveform.Tpo $(DEPDIR)/xerawdp-Waveform.Po
#	source='Waveform.cpp' object='xerawdp-Waveform.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-Waveform.o `test -f 'Waveform.cpp' || echo '$(srcdir)/'`Waveform.cpp

xerawdp-Waveform.obj: Waveform.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-Waveform.obj -MD -MP -MF $(DEPDIR)/xerawdp-Waveform.Tpo -c -o xerawdp-Waveform.obj `if test -f 'Waveform.cpp'; then $(CYGPATH_W) 'Waveform.cpp'; else $(CYGPATH_W) '$(srcdir)/Waveform.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-Waveform.Tpo $(DEPDIR)/xerawdp-Waveform.Po
#	source='Waveform.cpp' object='xerawdp-Waveform.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-Waveform.obj `if test -f 'Waveform.cpp'; then $(CYGPATH_W) 'Waveform.cpp'; else $(CYGPATH_W) '$(srcdir)/Waveform.cpp'; fi`

xerawdp-Filter.o: Filter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-Filter.o -MD -MP -MF $(DEPDIR)/xerawdp-Filter.Tpo -c -o xerawdp-Filter.o `test -f 'Filter.cpp' || echo '$(srcdir)/'`Filter.cpp
	mv -f $(DEPDIR)/xerawdp-Filter.Tpo $(DEPDIR)/xerawdp-Filter.Po
#	source='Filter.cpp' object='xerawdp-Filter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-Filter.o `test -f 'Filter.cpp' || echo '$(srcdir)/'`Filter.cpp

xerawdp-Filter.obj: Filter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-Filter.obj -MD -MP -MF $(DEPDIR)/xerawdp-Filter.Tpo -c -o xerawdp-Filter.obj `if test -f 'Filter.cpp'; then $(CYGPATH_W) 'Filter.cpp'; else $(CYGPATH_W) '$(srcdir)/Filter.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-Filter.Tpo $(DEPDIR)/xerawdp-Filter.Po
#	source='Filter.cpp' object='xerawdp-Filter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-Filter.obj `if test -f 'Filter.cpp'; then $(CYGPATH_W) 'Filter.cpp'; else $(CYGPATH_W) '$(srcdir)/Filter.cpp'; fi`

xerawdp-PeakFinder.o: PeakFinder.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-PeakFinder.o -MD -MP -MF $(DEPDIR)/xerawdp-PeakFinder.Tpo -c -o xerawdp-PeakFinder.o `test -f 'PeakFinder.cpp' || echo '$(srcdir)/'`PeakFinder.cpp
	mv -f $(DEPDIR)/xerawdp-PeakFinder.Tpo $(DEPDIR)/xerawdp-PeakFinder.Po
#	source='PeakFinder.cpp' object='xerawdp-PeakFinder.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-PeakFinder.o `test -f 'PeakFinder.cpp' || echo '$(srcdir)/'`PeakFinder.cpp

xerawdp-PeakFinder.obj: PeakFinder.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-PeakFinder.obj -MD -MP -MF $(DEPDIR)/xerawdp-PeakFinder.Tpo -c -o xerawdp-PeakFinder.obj `if test -f 'PeakFinder.cpp'; then $(CYGPATH_W) 'PeakFinder.cpp'; else $(CYGPATH_W) '$(srcdir)/PeakFinder.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-PeakFinder.Tpo $(DEPDIR)/xerawdp-PeakFinder.Po
#	source='PeakFinder.cpp' object='xerawdp-PeakFinder.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-PeakFinder.obj `if test -f 'PeakFinder.cpp'; then $(CYGPATH_W) 'PeakFinder.cpp'; else $(CYGPATH_W) '$(srcdir)/PeakFinder.cpp'; fi`

xerawdp-EventData.o: EventData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-EventData.o -MD -MP -MF $(DEPDIR)/xerawdp-EventData.Tpo -c -o xerawdp-EventData.o `test -f 'EventData.cpp' || echo '$(srcdir)/'`EventData.cpp
	mv -f $(DEPDIR)/xerawdp-EventData.Tpo $(DEPDIR)/xerawdp-EventData.Po
#	source='EventData.cpp' object='xerawdp-EventData.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-EventData.o `test -f 'EventData.cpp' || echo '$(srcdir)/'`EventData.cpp

xerawdp-EventData.obj: EventData.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-EventData.obj -MD -MP -MF $(DEPDIR)/xerawdp-EventData.Tpo -c -o xerawdp-EventData.obj `if test -f 'EventData.cpp'; then $(CYGPATH_W) 'EventData.cpp'; else $(CYGPATH_W) '$(srcdir)/EventData.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-EventData.Tpo $(DEPDIR)/xerawdp-EventData.Po
#	source='EventData.cpp' object='xerawdp-EventData.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-EventData.obj `if test -f 'EventData.cpp'; then $(CYGPATH_W) 'EventData.cpp'; else $(CYGPATH_W) '$(srcdir)/EventData.cpp'; fi`

xerawdp-PositionReconstruction.o: PositionReconstruction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-PositionReconstruction.o -MD -MP -MF $(DEPDIR)/xerawdp-PositionReconstruction.Tpo -c -o xerawdp-PositionReconstruction.o `test -f 'PositionReconstruction.cpp' || echo '$(srcdir)/'`PositionReconstruction.cpp
	mv -f $(DEPDIR)/xerawdp-PositionReconstruction.Tpo $(DEPDIR)/xerawdp-PositionReconstruction.Po
#	source='PositionReconstruction.cpp' object='xerawdp-PositionReconstruction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-PositionReconstruction.o `test -f 'PositionReconstruction.cpp' || echo '$(srcdir)/'`PositionReconstruction.cpp

xerawdp-PositionReconstruction.obj: PositionReconstruction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-PositionReconstruction.obj -MD -MP -MF $(DEPDIR)/xerawdp-PositionReconstruction.Tpo -c -o xerawdp-PositionReconstruction.obj `if test -f 'PositionReconstruction.cpp'; then $(CYGPATH_W) 'PositionReconstruction.cpp'; else $(CYGPATH_W) '$(srcdir)/PositionReconstruction.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-PositionReconstruction.Tpo $(DEPDIR)/xerawdp-PositionReconstruction.Po
#	source='PositionReconstruction.cpp' object='xerawdp-PositionReconstruction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-PositionReconstruction.obj `if test -f 'PositionReconstruction.cpp'; then $(CYGPATH_W) 'PositionReconstruction.cpp'; else $(CYGPATH_W) '$(srcdir)/PositionReconstruction.cpp'; fi`

xerawdp-SignalCorrections.o: SignalCorrections.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-SignalCorrections.o -MD -MP -MF $(DEPDIR)/xerawdp-SignalCorrections.Tpo -c -o xerawdp-SignalCorrections.o `test -f 'SignalCorrections.cpp' || echo '$(srcdir)/'`SignalCorrections.cpp
	mv -f $(DEPDIR)/xerawdp-SignalCorrections.Tpo $(DEPDIR)/xerawdp-SignalCorrections.Po
#	source='SignalCorrections.cpp' object='xerawdp-SignalCorrections.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-SignalCorrections.o `test -f 'SignalCorrections.cpp' || echo '$(srcdir)/'`SignalCorrections.cpp

xerawdp-SignalCorrections.obj: SignalCorrections.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-SignalCorrections.obj -MD -MP -MF $(DEPDIR)/xerawdp-SignalCorrections.Tpo -c -o xerawdp-SignalCorrections.obj `if test -f 'SignalCorrections.cpp'; then $(CYGPATH_W) 'SignalCorrections.cpp'; else $(CYGPATH_W) '$(srcdir)/SignalCorrections.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-SignalCorrections.Tpo $(DEPDIR)/xerawdp-SignalCorrections.Po
#	source='SignalCorrections.cpp' object='xerawdp-SignalCorrections.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-SignalCorrections.obj `if test -f 'SignalCorrections.cpp'; then $(CYGPATH_W) 'SignalCorrections.cpp'; else $(CYGPATH_W) '$(srcdir)/SignalCorrections.cpp'; fi`

xerawdp-SignalFitter.o: SignalFitter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-SignalFitter.o -MD -MP -MF $(DEPDIR)/xerawdp-SignalFitter.Tpo -c -o xerawdp-SignalFitter.o `test -f 'SignalFitter.cpp' || echo '$(srcdir)/'`SignalFitter.cpp
	mv -f $(DEPDIR)/xerawdp-SignalFitter.Tpo $(DEPDIR)/xerawdp-SignalFitter.Po
#	source='SignalFitter.cpp' object='xerawdp-SignalFitter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-SignalFitter.o `test -f 'SignalFitter.cpp' || echo '$(srcdir)/'`SignalFitter.cpp

xerawdp-SignalFitter.obj: SignalFitter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-SignalFitter.obj -MD -MP -MF $(DEPDIR)/xerawdp-SignalFitter.Tpo -c -o xerawdp-SignalFitter.obj `if test -f 'SignalFitter.cpp'; then $(CYGPATH_W) 'SignalFitter.cpp'; else $(CYGPATH_W) '$(srcdir)/SignalFitter.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-SignalFitter.Tpo $(DEPDIR)/xerawdp-SignalFitter.Po
#	source='SignalFitter.cpp' object='xerawdp-SignalFitter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-SignalFitter.obj `if test -f 'SignalFitter.cpp'; then $(CYGPATH_W) 'SignalFitter.cpp'; else $(CYGPATH_W) '$(srcdir)/SignalFitter.cpp'; fi`

xerawdp-AnalysisManager.o: AnalysisManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-AnalysisManager.o -MD -MP -MF $(DEPDIR)/xerawdp-AnalysisManager.Tpo -c -o xerawdp-AnalysisManager.o `test -f 'AnalysisManager.cpp' || echo '$(srcdir)/'`AnalysisManager.cpp
	mv -f $(DEPDIR)/xerawdp-AnalysisManager.Tpo $(DEPDIR)/xerawdp-AnalysisManager.Po
#	source='AnalysisManager.cpp' object='xerawdp-AnalysisManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-AnalysisManager.o `test -f 'AnalysisManager.cpp' || echo '$(srcdir)/'`AnalysisManager.cpp

xerawdp-AnalysisManager.obj: AnalysisManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-AnalysisManager.obj -MD -MP -MF $(DEPDIR)/xerawdp-AnalysisManager.Tpo -c -o xerawdp-AnalysisManager.obj `if test -f 'AnalysisManager.cpp'; then $(CYGPATH_W) 'AnalysisManager.cpp'; else $(CYGPATH_W) '$(srcdir)/AnalysisManager.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-AnalysisManager.Tpo $(DEPDIR)/xerawdp-AnalysisManager.Po
#	source='AnalysisManager.cpp' object='xerawdp-AnalysisManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-AnalysisManager.obj `if test -f 'AnalysisManager.cpp'; then $(CYGPATH_W) 'AnalysisManager.cpp'; else $(CYGPATH_W) '$(srcdir)/AnalysisManager.cpp'; fi`

xerawdp-RawDataProcessor.o: RawDataProcessor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-RawDataProcessor.o -MD -MP -MF $(DEPDIR)/xerawdp-RawDataProcessor.Tpo -c -o xerawdp-RawDataProcessor.o `test -f 'RawDataProcessor.cpp' || echo '$(srcdir)/'`RawDataProcessor.cpp
	mv -f $(DEPDIR)/xerawdp-RawDataProcessor.Tpo $(DEPDIR)/xerawdp-RawDataProcessor.Po
#	source='RawDataProcessor.cpp' object='xerawdp-RawDataProcessor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-RawDataProcessor.o `test -f 'RawDataProcessor.cpp' || echo '$(srcdir)/'`RawDataProcessor.cpp

xerawdp-RawDataProcessor.obj: RawDataProcessor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-RawDataProcessor.obj -MD -MP -MF $(DEPDIR)/xerawdp-RawDataProcessor.Tpo -c -o xerawdp-RawDataProcessor.obj `if test -f 'RawDataProcessor.cpp'; then $(CYGPATH_W) 'RawDataProcessor.cpp'; else $(CYGPATH_W) '$(srcdir)/RawDataProcessor.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-RawDataProcessor.Tpo $(DEPDIR)/xerawdp-RawDataProcessor.Po
#	source='RawDataProcessor.cpp' object='xerawdp-RawDataProcessor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-RawDataProcessor.obj `if test -f 'RawDataProcessor.cpp'; then $(CYGPATH_W) 'RawDataProcessor.cpp'; else $(CYGPATH_W) '$(srcdir)/RawDataProcessor.cpp'; fi`

xerawdp-XmlConfig.o: XmlConfig.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-XmlConfig.o -MD -MP -MF $(DEPDIR)/xerawdp-XmlConfig.Tpo -c -o xerawdp-XmlConfig.o `test -f 'XmlConfig.cpp' || echo '$(srcdir)/'`XmlConfig.cpp
	mv -f $(DEPDIR)/xerawdp-XmlConfig.Tpo $(DEPDIR)/xerawdp-XmlConfig.Po
#	source='XmlConfig.cpp' object='xerawdp-XmlConfig.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-XmlConfig.o `test -f 'XmlConfig.cpp' || echo '$(srcdir)/'`XmlConfig.cpp

xerawdp-XmlConfig.obj: XmlConfig.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-XmlConfig.obj -MD -MP -MF $(DEPDIR)/xerawdp-XmlConfig.Tpo -c -o xerawdp-XmlConfig.obj `if test -f 'XmlConfig.cpp'; then $(CYGPATH_W) 'XmlConfig.cpp'; else $(CYGPATH_W) '$(srcdir)/XmlConfig.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-XmlConfig.Tpo $(DEPDIR)/xerawdp-XmlConfig.Po
#	source='XmlConfig.cpp' object='xerawdp-XmlConfig.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-XmlConfig.obj `if test -f 'XmlConfig.cpp'; then $(CYGPATH_W) 'XmlConfig.cpp'; else $(CYGPATH_W) '$(srcdir)/XmlConfig.cpp'; fi`

xerawdp-xerawdp.o: xerawdp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-xerawdp.o -MD -MP -MF $(DEPDIR)/xerawdp-xerawdp.Tpo -c -o xerawdp-xerawdp.o `test -f 'xerawdp.cpp' || echo '$(srcdir)/'`xerawdp.cpp
	mv -f $(DEPDIR)/xerawdp-xerawdp.Tpo $(DEPDIR)/xerawdp-xerawdp.Po
#	source='xerawdp.cpp' object='xerawdp-xerawdp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-xerawdp.o `test -f 'xerawdp.cpp' || echo '$(srcdir)/'`xerawdp.cpp

xerawdp-xerawdp.obj: xerawdp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-xerawdp.obj -MD -MP -MF $(DEPDIR)/xerawdp-xerawdp.Tpo -c -o xerawdp-xerawdp.obj `if test -f 'xerawdp.cpp'; then $(CYGPATH_W) 'xerawdp.cpp'; else $(CYGPATH_W) '$(srcdir)/xerawdp.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-xerawdp.Tpo $(DEPDIR)/xerawdp-xerawdp.Po
#	source='xerawdp.cpp' object='xerawdp-xerawdp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-xerawdp.obj `if test -f 'xerawdp.cpp'; then $(CYGPATH_W) 'xerawdp.cpp'; else $(CYGPATH_W) '$(srcdir)/xerawdp.cpp'; fi`

xerawdp-VectorDict.o: VectorDict.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-VectorDict.o -MD -MP -MF $(DEPDIR)/xerawdp-VectorDict.Tpo -c -o xerawdp-VectorDict.o `test -f 'VectorDict.cpp' || echo '$(srcdir)/'`VectorDict.cpp
	mv -f $(DEPDIR)/xerawdp-VectorDict.Tpo $(DEPDIR)/xerawdp-VectorDict.Po
#	source='VectorDict.cpp' object='xerawdp-VectorDict.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-VectorDict.o `test -f 'VectorDict.cpp' || echo '$(srcdir)/'`VectorDict.cpp

xerawdp-VectorDict.obj: VectorDict.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT xerawdp-VectorDict.obj -MD -MP -MF $(DEPDIR)/xerawdp-VectorDict.Tpo -c -o xerawdp-VectorDict.obj `if test -f 'VectorDict.cpp'; then $(CYGPATH_W) 'VectorDict.cpp'; else $(CYGPATH_W) '$(srcdir)/VectorDict.cpp'; fi`
	mv -f $(DEPDIR)/xerawdp-VectorDict.Tpo $(DEPDIR)/xerawdp-VectorDict.Po
#	source='VectorDict.cpp' object='xerawdp-VectorDict.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(xerawdp_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o xerawdp-VectorDict.obj `if test -f 'VectorDict.cpp'; then $(CYGPATH_W) 'VectorDict.cpp'; else $(CYGPATH_W) '$(srcdir)/VectorDict.cpp'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-exec-hook

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-exec-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-exec-hook install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS

install-exec-hook:
	cd $(DESTDIR)$(bindir) && \
	mv -f xerawdp$(EXEEXT) xerawdp-$(VERSION)$(EXEEXT) && \
	$(LN_S) xerawdp-$(VERSION)$(EXEEXT) xerawdp$(EXEEXT)
LinkDef.h: Makefile
	echo '#pragma link C++ class vector<int>+;' > $@
	echo '#pragma link C++ class vector<vector<float> >+;' >> $@
Vector.h: Makefile
	echo '#include <vector>' > $@
VectorDict.cpp: Vector.h LinkDef.h
	rootcint -f $@ -c $^
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
