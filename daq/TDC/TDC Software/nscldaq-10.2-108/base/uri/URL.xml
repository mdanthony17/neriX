<!-- chapter libraries -->

<chapter id="chapter.uri">
    <title>Parsing and URIs</title>
    <para>
        Elements of the NSCL acquisition system are named with Universal Resource
        Locators, or URIs.  For the purposes of the NSCLDAQ, a URI is not really
        distinguishable from a URL (Universal Resource Locator).  It has the form:
        <literal>protocol://host:port/path</literal>, or
        <literal>protocol://host:port</literal>
    </para>
    <variablelist>
        <varlistentry>
            <term><firstterm>protocol</firstterm></term>
            <listitem>
                <para>
                    Is the means used to talk with a resource.  For nscldaq
                    this is most often <literal>tcp</literal>
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><firstterm>host</firstterm></term>
            <listitem>
                <para>
                    Is the system that hosts the resource that is identified
                    by the URI. The host can either be a dotted IP address,
                    or the DNS name of a host on the network.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><firstterm>path</firstterm></term>
            <listitem>
                <para>
                    Identifies the resource within the host. This identification
                    may differ depending on what the resource is.  For a ring buffer,
                    for example, the path is the name of the ring buffer.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><firstterm>port</firstterm></term>
            <listitem>
                <para>
                    Identifes the network port number used to contact the server
                    that provides the resource to the network.
                </para>
            </listitem>
        </varlistentry>
    </variablelist>
    <para>
        The URI library is a class that parses URI's and provides member
        functions that return the elements of a URI.  Here's a trivial example
        of the URI library in use:
    </para>
    <example>
        <title>Sample URI library program</title>
        <programlisting>
#include &lt;URL.h&gt;
#include &lt;URIFormatException.h&gt;
#include &lt;iostream&gt;
#include &lt;stdlib.h&gt;
int main(int argc, char** argv)
{
    if (argc != 2) {
        cerr &lt;&lt; "Usage:\n";
        cerr &lt;&lt; "  urltest URI\n";             <co id="chapter.uri.usage" />
        exit(-1);
    }
    
    try {                                           <co id="chapter.uri.try" />
       URL uri(argv[1]);                            <co id="chapter.uri.construct" />
       cout &lt;&lt; "Protocol: " &lt;&lt; uri.getProto()
            &lt;&lt; " host : "   &lt;&lt; uri.getHostName()
            &lt;&lt; " path: "    &lt;&lt; uri.getPath()       <co id="chapter.uri.pieces" />
            &lt;&lt; " port: "    &lt;&lt; uri.getPort() &lt;&lt; endl;
    }
    catch(CURIFormatException&amp; error) {
        cerr &lt;&lt; "URI was not valid: "
             &lt;&lt; except.ReasonText()           <co id="chapter.uri.catch" />
             &lt;&lt; endl;
        exit(-1);
    }
    exit(0);
}
        </programlisting>
    </example>
    <calloutlist>
        <callout arearefs="chapter.uri.usage">
            <para>
                The test program accepts the URL to parse as its command line
                parameter.  If the user does not provide a URL or provides too
                many parameters, the progrm's usage is printed on
                <literal>stderr</literal> before the program exits.
            </para>
        </callout>
        <callout arearefs="chapter.uri.try">
            <para>
                The <classname>URL</classname> constructor parses the
                URI. If, however the URI is not valid syntax, or refers to
                a host that does not exist, it will throw an
                exception (<classname>CUIRFormatException</classname>).
                The construction and manipulation of the URI is therefore
                wrapped in a <command>try</command>/<command>catch</command>
                block.
            </para>
        </callout>
        <callout arearefs="chapter.uri.pieces">
            <para>
                This section of code takes the parsed URI and demonstrates
                how to pull the elements of the URI out and print them.
            </para>
        </callout>
        <callout arearefs="chapter.uri.catch">
            <para>
                This code catches errors that may be thrown by the URI
                parse.  The reason for the error is printed out.
                For more information see
                the
                <link linkend="manpage.curiformatexception">
                    <classname>CURIFormatException</classname> reference page</link>.
            </para>
        </callout>
    </calloutlist>
    
    <para>
        To incorporate the URI library into your source code, you must compile
        with an appropriate set of switches to allow the compiler to locat your
        header files, and the linker to locate the URL library both at link time
        and at load time.  If the example program above is called
        <literal>urltest.cpp</literal> and if you have an environment variable
        DAQROOT that points to the top level directory of the NSCLDAQ
        install tree the command below will compile and link the program.
        <example>
            <title>Building <literal>urltst.cpp</literal></title>
            <programlisting>
g++ -o urltest -I$DAQROOT/include urltest.cpp -L$DAQROOT/lib -lurl \
               -Wl,"-rpath=$DAQROOT/lib"
            </programlisting>
        </example>
    </para>
</chapter>
<!-- /chapter -->

<!-- manpage 3daq -->

<refentry id="manpage.url">
  <refmeta>
     <refentrytitle>URL</refentrytitle>
     <manvolnum>3daq</manvolnum>
  </refmeta>
  <refnamediv>
     <refname>URL</refname>
 <refpurpose>Parse Uniform Resource Identifiers (URI)</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
     <programlisting>
#include &lt;URL.h&gt;
     </programlisting>
     <classsynopsis>
        <ooclass><classname>URL</classname></ooclass>
        <constructorsynopsis>
            <methodname>URL</methodname>
            <methodparam>
                <type>std::string</type> <parameter>uri</parameter>
            </methodparam>
        </constructorsynopsis>
        <constructorsynopsis>
            <methodname>URL</methodname>
            <methodparam>
                <modifier>const</modifier> <type>URL&amp;</type> <parameter>rhs</parameter>
            </methodparam>
        </constructorsynopsis>
        <methodsynopsis>
            <type>URL&amp;</type> <methodname>operator=</methodname>
            <methodparam>
                <modifier>const</modifier> <type>URL&amp;</type> <parameter>url</parameter>
            </methodparam>
        </methodsynopsis>
        <methodsynopsis>
            <type>bool</type>
            <methodname>operator==</methodname>
            <methodparam>
                <modifier>const</modifier> <type>URL&amp;</type> <parameter>rhs</parameter>
            </methodparam>
            <modifier> const</modifier>
        </methodsynopsis>
        <methodsynopsis>
            <type>bool</type>
            <methodname>operator!=</methodname>
            <methodparam>
                <modifier>const</modifier> <type>URL&amp;</type> <parameter>rhs</parameter>
            </methodparam>
            <modifier> const</modifier>
        </methodsynopsis>
        <methodsynopsis>
            <type>std::string</type> <methodname>getProto</methodname>
                                     <void /> <modifier>const</modifier>
        </methodsynopsis>
        <methodsynopsis>
            <type>std::string</type>
            <methodname>getHostName</methodname>
            <void /> <modifier>const</modifier>
        </methodsynopsis>
        <methodsynopsis>
            <type>int</type> <methodname>getPort</methodname>
                             <void />
        </methodsynopsis>
        <methodsynopsis>
            <type>std::string</type> <methodname>getPath</methodname>
                    <void /><modifier>const</modifier>
        </methodsynopsis>
        <methodsynopsis>
            <type>std::string</type> <methodname>operator std::string</methodname>
                                     <void /> <modifier>const</modifier>
        </methodsynopsis>
     </classsynopsis>
  </refsynopsisdiv>
  <refsect1>
     <title>Description</title>
     <para>
        Objects of this class parse Universal Resource Identifiers (URIs).
        Methods of this class return the components of a URI.
     </para>
  </refsect1>
  <refsect1>
     <title>
        Public member functions
     </title>
        <formalpara>
            <title>Constructors</title>
            <para>
            </para>
        </formalpara>
        <constructorsynopsis>
            <methodname>URL</methodname>
            <methodparam>
                <type>std::string</type> <parameter>uri</parameter>
            </methodparam>
        </constructorsynopsis>
        <para>
            Constructs a
            <classname>URL</classname>
            object by parsing <parameter>uri</parameter>.
            The constructor may throw a
            <classname>CURIFormatException</classname> exception.
            see Exceptions below for more information.
        </para>
        <constructorsynopsis>
            <methodname>URL</methodname>
            <methodparam>
                <modifier>const</modifier> <type>URL&amp;</type> <parameter>rhs</parameter>
            </methodparam>
        </constructorsynopsis>
        <para>
            Constructs a
            <classname>URL</classname>
            object that is an exact duplicate of the
            <parameter>rhs</parameter>
            object.  
        </para>
        <formalpara>
            <title>Other canonical functions.</title>
            <para>
                The
                <classname>URL</classname>
                class implements assignment, and comparison for equality and
                inequality.  Equality holds if all the components of the parsed
                URI are identical.
                Inequality holds if equality does not hold.
            </para>
        </formalpara>
        <formalpara>
            <title>Other methods</title>
            <para>
            </para>
        </formalpara>
        <methodsynopsis>
            <type>std::string</type> <methodname>getProto</methodname>
                                     <void /> <modifier>const</modifier>
        </methodsynopsis>
        <para>
            Returns the protocol component of the URI. The protocol
            component describes the mechanism  used to access the resource.
        </para>
        <methodsynopsis>
            <type>std::string</type>
            <methodname>getHostName</methodname>
            <void /> <modifier>const</modifier>
        </methodsynopsis>
        <para>
            Returns the hostname component of the URI.  The hostname describes
            where in the network the resource described by the URI is located.
        </para>
        <methodsynopsis>
            <type>int</type> <methodname>getPort</methodname>
                             <void />
        </methodsynopsis>
        <para>
            Returns the port number part of the URI.  While port numbers are
            optional on real URI's they are not optional for NSCL URIs.
            The port determines where the server for the resource is listening
            for connections.
        </para>
        <methodsynopsis>
            <type>std::string</type> <methodname>getPath</methodname>
                    <void /><modifier>const</modifier>
        </methodsynopsis>
        <para>
            Returns the path component of the URI.  The path component tells
            the client and server where within the namespaces for the protocol
            the component is located.  The path component is optional.  If not
            provided, it defaults to <literal>/</literal>.
        </para>
        <methodsynopsis>
            <type>std::string</type> <methodname>operator std::string</methodname>
                                     <void /> <modifier>const</modifier>
        </methodsynopsis>
        <para>
            Re-constructs and returns the stringified URL.  This should be very
            close to the string that was used to construct this object, or the
            object from which the object was copied.
        </para>
  </refsect1>
  <refsect1>
     <title>Exceptions</title>
     <para>
        Not all strings are valid URIs.  If a <classname>URL</classname> object
        is constructed with a string that is not a valid URI, the constructor
        will throw a
        <classname>CURIFormatException</classname>.
        <classname>CURIFormatException</classname> is derived from the
        <classname>CExeption</classname> common exception base class.
     </para>
     <para>
        <link linkend="chapter.exception">The NSCL Exception class library</link>
        chapter describes the exception class hierarchy, how to use it and
        its common set of interfaces.
        <link linkend="manpage.cexception">The <classname>CException</classname></link> reference
        page describes the <classname>CException</classname> class.
        <link linkend="manpage.curiformatexception">The <classname>CURIFormatException</classname></link>
        reference page describes the
        <classname>CUIRFormatException</classname>
        class.
     </para>
  </refsect1>
</refentry>
    
            
<!-- /manpage -->