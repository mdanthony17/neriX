<!-- chapter commands -->

<chapter id="chapter.ringpipes">
    <title>Ring piping utilities</title>
    <para>
        The ring pipe utilities are intended to provide mechanisms for
        non ringbuffer aware software to access ring buffers.  These utilities
        are also used by the high level access libraries to provide access
        to remote ringbuffers via proxy rings.
    </para>
    <para>
        There are two ring pipe utilities:
    </para>
    <variablelist>
        <varlistentry>
        <term><command>ringtostdout</command></term>
        <listitem>
            <para>
                Accepts data from a ring buffer and transmits it to the program's
                <literal>stdout</literal> file descriptor.
            </para>
        </listitem>
        </varlistentry>
        <varlistentry>
            <term><command>stdintoring</command></term>
            <listitem>
                <para>
                    Accepts data from the program's
                    <literal>stdin</literal>
                    file descriptor and places it in the ring buffer.
                </para>
            </listitem>
        </varlistentry>
    </variablelist>
    <para>
        The <command>ringtostdout</command> command can be used to
        hoist data out of ring buffers to a command or filter that is not
        aware of the NSCL Data acquisition system.  It is a key element of the
        pipeline that ships data to
        <application>SpecTcl</application>,
        as well as a key component of the networked data distribution system
        (with <literal>stdout</literal> redirected to a socket).
        For detailed usage information see the
        <link linkend="manpage.ringtostdout">ringtostdout reference pages</link>.
    </para>
    <para>
        The <command>stdintoring</command> command can be used to allow a
        non NSCLDAQ aware program or pipeline to be a producer for a ring buffer.
        This command is also a key component of the networked data distribution
        system (with
        <literal>stdin</literal> redirected to a socket).
        For detailed information, see the
        <link linkend="manpage.stdintoring">stdintoring reference material</link>.
    </para>

</chapter>

<!-- /chapter -->

<!-- manpage 1daq -->
<refentry id="manpage.ringtostdout">
  <refmeta>
     <refentrytitle>ringtostdout</refentrytitle>
     <manvolnum>1daq</manvolnum>
  </refmeta>
  <refnamediv>
     <refname>ringtostdout</refname>
     <refpurpose>Transmit data from a ring buffer to stdout.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
	<command>
ringbuffertostdout <option>--mindata=<replaceable>n</replaceable></option> <option>--timeout=<replaceable>t</replaceable></option> <replaceable>ringname</replaceable>
                                                                                                
	</command>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
	This command accepts data from the ring buffer named
        <parameter>ringname</parameter>
        and writes it to stdout.  It can be used as the starting point of a
        pipeline that sends data from ringbuffers to programs that are not
        ringbuffer aware.
     </para>
  </refsect1>
  <refsect1>
     <title>
	OPTIONS
     </title>
     <variablelist>
	<varlistentry>
	    <term><option>--mindata</option>=<replaceable>n</replaceable></term>
	    <listitem>
		<para>
                    Specifies the minimum size of the block of data
                    <command>ringtostdout</command>
                    will try to get from the ring buffer before transmitting
                    data to
                    <literal>stdout</literal>.
                    The value <replaceable>n</replaceable>
                    is the number of bytes of data or can be a number followed by
                    <literal>k</literal>, <literal>m</literal> or <literal>g</literal>
                    which multiply the numeric value by
                    <literal>1024</literal>, <literal>1024*1024</literal> and
                    <literal>1024*1024*1024</literal> respectively.
		</para>
                <para>
                    This value defaults to <literal>1m</literal> if not
                    explicitly overridden.
                    See also, however, the <option>--timeout</option> option
                    below.
                </para>
	    </listitem>
	</varlistentry>
        <varlistentry>
            <term><option>--timeout</option>=<replaceable>seconds</replaceable></term>
            <listitem>
                <para>
                    Specifies the maximum amount of time in seconds the program will
                    wait for for the number of bytes specified as
                    <option>--mindata</option>. If by that timeout, that number
                    of bytes is not available, any bytes that are in the ring
                    are read and forwarded to stdout.  This ensures that latencies
                    remain tolerable even at low data rates with large values
                    of <option>--mindata</option>
                </para>
            </listitem>
        </varlistentry>
     </variablelist>
  </refsect1>
  <refsect1>
     <title>EXAMPLES</title>
     <para>
        This sample creates a hex dump of the data coming from a
        ring buffer:
     </para>
     <example>
        <title>making hex dumps of data from a ring buffer.</title>
        <programlisting>
ringtostdout somering | od -xa
        </programlisting>
     </example>
  </refsect1>
</refentry>

<refentry id="manpage.stdintoring">
  <refmeta>
     <refentrytitle>stdintoring</refentrytitle>
     <manvolnum>1daq</manvolnum>
  </refmeta>
  <refnamediv>
     <refname>stdintoring</refname>
     <refpurpose>Pipe stdin to a ring buffer.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
	<command>
stdintoring <option>--mindata=<replaceable>n</replaceable></option> <option>--timeout=<replaceable>t</replaceable></option> <replaceable>ringname</replaceable>
	</command>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
	Pipes data from its standard input to a ring buffer.  This provides
        one mechanism to send data from a non ring buffer aware data source
        to a ring.
     </para>
  </refsect1>
  <refsect1>
     <title>
	OPTIONS
     </title>
     <variablelist>
        <varlistentry>
	    <term><option>--mindata</option>=<replaceable>n</replaceable></term>
	    <listitem>
		<para>
                    Specifies the minimum size of the block of data
                    <command>stdintoring</command>
                    will try to get from the stdin prior to transferring it to
                    the ring.
                    The value <replaceable>n</replaceable>
                    is the number of bytes of data or can be a number followed by
                    <literal>k</literal>, <literal>m</literal> or <literal>g</literal>
                    which multiply the numeric value by
                    <literal>1024</literal>, <literal>1024*1024</literal> and
                    <literal>1024*1024*1024</literal> respectively.
		</para>
                <para>
                    This value defaults to <literal>1m</literal> if not
                    explicitly overridden.
                    See also, however, the <option>--timeout</option> option
                    below.
                </para>
	    </listitem>
	</varlistentry>
        <varlistentry>
            <term><option>--timeout</option>=<replaceable>seconds</replaceable></term>
            <listitem>
                <para>
                    Specifies the maximum amount of time in seconds the program will
                    wait for for the number of bytes specified as
                    <option>--mindata</option>. If by that timeout, that number
                    of bytes is not available, any bytes that are available on stdin
                    are read and forwarded to the ring.  This ensures that latencies
                    remain tolerable even at low data rates with large values
                    of <option>--mindata</option>
                </para>
            </listitem>
        </varlistentry>
    </variablelist>
  </refsect1>
  <refsect1>
     <title>EXAMPLES</title>
     <para>
        The example below puts the data from several raw event files into the ring
        buffer simulating online data taking.
     </para>
     <example>
        <title>Using stdintoring</title>
        <programlisting>
cat ~/stagearea/complete/run10*.evt | stdintoring somering
        </programlisting>
     </example>
  </refsect1>

</refentry>


<!-- /manpage -->