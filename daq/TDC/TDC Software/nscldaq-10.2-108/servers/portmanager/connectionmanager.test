# require the necessary packages.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

source Log.tcl
source PortManager.tcl
source ConnectionManager.tcl



package require Log
package require PortManager
package require ConnectionManager

#   support procs.

proc testCleanup {} {
    catch {file delete ./log.log}
    catch {file delete ./usage.txt}
    
}
proc makeLog {n} {
    return [Log create $n -filename ./log.log]
}
proc makePorts {n} {
    return [PortManager create $n -range [list 20000 21000]]
}
#  Use the 1234 listen port in case the connection manager is running on the default port already on
#  this system.
proc makeManager {n} {
    set l [makeLog l]
    set p [makePorts p]
    return [ConnectionManager create $n -usagefile ./usage.txt -logger $l -ports $p -listen 1234]
}
proc destroyManager {n} {
    set log [$n cget -logger]
    set pm  [$n cget -ports]
    $n destroy
    $log destroy
    $pm  destroy 
    eventLoop 500;     #  Let tcl cleanup ports etc.
 }

set v 0
proc eventLoop {ms} {
    global v
    
    # Execute the event loop for  $ms milliseconds:
    
    after $ms {incr v}
    vwait v
}
#  Construction tests.

test 1.1 {constructOk} {} {
    #  This cannot factor into makeManager since we need to
    #  know the guts
    #
    set l [makeLog l]
    set p [makePorts p]
    set cm [ConnectionManager create cm -usagefile ./usage.txt -logger $l -ports $p -listen 1234]
            
    set actuall [$cm cget -logger]
    set actualp [$cm cget -ports]
    set actualu [$cm cget -usagefile]
    set actuallp [$cm cget -listen]
    
    set sb [list $l $p ./usage.txt 1234]
    set is [list $actuall $actualp $actualu $actuallp]
    
    testCleanup
    $cm destroy
    $l  destroy
    $p  destroy
    
    if {$sb == $is} {
        set result 1
    } else {
        set result [list $sb !=  $is]
    }
    
    
} {1}

test 1.2 {constructNoPort} {} {
    set l [makeLog l]
    if {[catch {ConnectionManager create cm -usagefile ./usage.txt -logger $l} msg]} {
        if {$msg == "Error in constructor: Constructing a ConnectionManager must specify a PortManager via -ports"} {
            set result 1
        } else {
            set result [list "$msg != \"Error in constructor: Constructing a ConnectionManager must specify a PortManager via -ports\""]
        }
    } else {
        set result "Created manager!!"
        $cm destroy
    }
    testCleanup
    $l destroy
    set result
    
} {1}

test 1.3 {constructnoLog} {} {
    set p [makePorts p]
    if {[catch {ConnectionManager create cm -usagefile ./usage.txt -ports $p} msg]} {
        if {$msg == "Error in constructor: Constructing a ConnectionManager must specify a Log via -logger"} {
            set result 1
        } else {
            set result [list $msg != "Error in constructor: Constructing a ConnectionManager must specify a Log via -logger"]
        }
    } else {
        set result "Created manager!!"
    }
    testCleanup
    $p destroy
    set result
    
} {1}

# Connection tests.

test 2.1 {connect disconnect test} {} {
    testCleanup
    set cm [makeManager cm]
    
    #  Connect to the connection manager.  The eventLoop calls are needed to
    #  be sure that ConnectionManager's callbacks fire off.
    
    set fd [socket localhost 1234]
    eventLoop 50
    
    #  Note that windows and linux have different ideas of what my hostname will
    # look like but -sockname gives the right answer for both:
    
    set expectedhost [fconfigure $fd -sockname]
    set expectedhost [lindex $expectedhost 1]
    
    #  Now disconnect.. the event loop is needed to let ConnectionManager clean up...
    
    close $fd
    eventLoop 500
    
    destroyManager $cm
    eventLoop 500


    #  We should now have a file ../log.log containing a timestamped
    #  info message that says: "Connection accepted from $host"
    #  To be exact:
    #    info  mmm dd, yyyy [info host] {Connection accepted from $host}
    
    set file [open ./log.log r]
    set contents [read $file]
    close $file

    testCleanup
    
    set message [lreplace $contents 0 4]
    if  {$message == "Connection accepted from $expectedhost"} {
        set result 1
    } else {
        set result [list $message != "Connection accepted from $expectedhost"]
    }
    
} {1}

#  Test allocation:

test 3.1 {allocateport} {} {
    set cm [makeManager cm]

    #  Connect to the connection manager.  The eventLoop calls are needed to
    #  be sure that ConnectionManager's callbacks fire off.
    
    set fd [socket localhost 1234]
    fconfigure $fd -buffering line
    
    eventLoop 50
    
    # Allocate a port:
    
    puts $fd "GIMME test $tcl_platform(user)"
    flush $fd
    eventLoop 50
    
    set reply [gets $fd]
    
    

    #  Now disconnect.. the event loop is needed to let ConnectionManager clean up...
    
    close $fd
    eventLoop 500
    
    destroyManager $cm
    testCleanup
    
    set reply
   
    
} {OK 21000}


test 3.2 {reallocatetest - this relies on internals server knowledge} {} {
    set cm [makeManager cm]

    #  Connect to the connection manager.  The eventLoop calls are needed to
    #  be sure that ConnectionManager's callbacks fire off.
    
    set fd [socket localhost 1234]
    fconfigure $fd -buffering line
    
    eventLoop 50
    
    # Allocate a port:
    
    puts $fd "GIMME test $tcl_platform(user)"
    flush $fd
    eventLoop 50
    
    set reply1 [gets $fd]
    
    

    #  Now disconnect.. the event loop is needed to let ConnectionManager clean up...
    
    close $fd
    eventLoop 500
    
    set fd [socket localhost 1234]
    fconfigure $fd -buffering line
    
    eventLoop 50
    
    # Allocate a port:
    
    puts $fd "GIMME test $tcl_platform(user)"
    flush $fd
    eventLoop 50
    
    set reply2 [gets $fd]
    
    #  Cleanup the test:
    destroyManager $cm

    testCleanup
 
 
    # Figure out the result:
    
    if {$reply1 == $reply2} {
        set result 1
    } else {
        set result [list $reply1 != $reply2]
    }
} {1}

#  Test the list functionality of the connection manager:

test 4.1 {null list} {} {
    set cm [makeManager cm]
    set fd [socket localhost 1234]
    fconfigure $fd -buffering line
    eventLoop 50
    
    
    # Ask for the listing (need to enter the event loop to let us
    # respond etc.
    #
    puts $fd "LIST"
    eventLoop 50
    
    #  Get the reply back and clean up..
    #
    set line [gets $fd]
    close $fd
    eventLoop 50
    destroyManager $cm
    testCleanup
    
    set line
    
} {OK 0}

test 4.2 {single entry list} {} {
    set cm [makeManager cm]
    set fd [socket localhost 1234]
    fconfigure $fd -buffering line
    eventLoop 50

    #  Ask for a port:
    
    puts $fd "GIMME test $tcl_platform(user)"
    flush $fd
    eventLoop 50
    
    #  Get the port back We're assuming the
    #  get port test passed.

    set reply1 [gets $fd]
    set port [lindex $reply 1]
    
    #  Ask for a list of allocated ports:
    
    puts $fd "LIST"
    eventLoop 50
    
    #  Should be 2 lines first says:
    #    OK 1
    # Second:
    #   port test tcl_platform(user)
    #
    set l1 [gets $fd]
    set l2 [gets $fd]
    #
    #  Clean up the server before analyzing the results
    #
    close $fd
    eventLoop 100
    destroyManager $cm
    testCleanup
    
    #  Let's see what we got:
    
    set portinfosb [list $port test $tcl_platform(user)]
    if {$l1 != "OK 1"} {
        set result "line1 was '$l1' sb 'OK 1'"
    } else {
        if {$l2 != $portinfosb} {
            set result "line2 was '$l2' sb '$portinfosb'"
        } else {
            set result 1
        }
    }
    
} {1}

#  Post test cleanup:


::tcltest::cleanupTests