#  Test the Log package.
#  For many tests, the package will create a temporary log file named
#  test.log   If the test is successful, this  logfile is removed after
#  each run.. Just in case, we remove it here as well.
#
# require the necessary packages.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

proc testCleanup {} {
    if {[file exists ./test.log]} {
        file delete ./test.log  
    }
}

proc readTestFile {} {
    set f [open ./test.log r]
    set result [read $f]
    close $f
    
    return $result
}

proc getLevel {contents} {
    return [lindex $contents 0]
}
proc getHost {contents} {
    return [lindex $contents 4]
}
proc getMessage {contents} {
    return [lrange $contents 5 end]
}

proc processLog {} {
   
    set contents [readTestFile]
    set level    [getLevel $contents]
    set host     [getHost  $contents]
    set message  [getMessage $contents]
    
    if  {$host == [info hostname]} {
        set hostok 1
    } else {
        set hostok $host
    }
    return [list $level $hostok $message]
}
testCleanup

source Log.tcl
package require Log


test 1.1 {logAlocation} {} {
    set atest [::Log create atest -filename ./test.log]
    
    $atest logAllocation 0 test me

    $atest destroy

    set result [processLog]

    testCleanup

    return $result
    
} {info 1 {Port 0 was allocated to test run by me}}


test 1.2 {logConnection} {} {
    set atest [::Log create atest -filename ./test.log]
    $atest logConnection george
    $atest destroy

    set result [processLog]
    
    testCleanup

    return $result
    
} {info 1 {Connection accepted from george}}

test 1.3 {logRelease} {} {
    
    set test [::Log create atest -filename ./test.log]
    $test logRelease 1 2 3
    $test destroy
    
    set result [processLog]    
    
    testCleanup

    return $result
    
} {info 1 {Port 1 was released by 2 run by 3}}

test 1.4 {logAllocationFailure} {} {
    set atest [::Log create atest -filename ./test.log]
    $atest logAllocationFailure myapp george "I said so"
    $atest destroy
    set result [processLog]
    
    testCleanup
    
    return $result
} {alert 1 {Unable to allocate a port for myapp run by george because: I said so}}

test 1.5 {logInvalidRequest} {} {
    set test [::Log create atest -filename ./test.log]
    $test logInvalidRequest somehost braak
    $test destroy
    
    set result [processLog]
    
    
    testCleanup
    
    return $result
    
} {alert 1 {somehost issued an illegal request: braak}}
#  Post test cleanup:


::tcltest::cleanupTests