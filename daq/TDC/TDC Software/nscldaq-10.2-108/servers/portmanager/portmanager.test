#  Test the PortManager class

# require the necessary packages.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}
source ./Log.tcl
source ./PortManager.tcl
package require PortManager

#  Tests related to construction.

test 1.1 {default construction} {} {
    set pm [::PortManager create pm]
    
    set range [$pm cget -range]
    $pm destroy
    
    set range
    
} {30001 31000}

test 1.2 {custom construction} {} {
    set pm [::PortManager create pm -range {1000 1010}]
    
    set range [$pm cget -range]
    $pm destroy
    
    set range
} {1000 1010}

test 1.3 {consruct with range not 2 element list} {} {
    if {![catch {::PortManager create pm -range 5} pm]} {
        $pm destroy
        set pm "Construction did not fail!!"
    }
    set pm
} {Error in constructor: Range must be {low hi} list}
    
test 1.4 {construct with backwards range} {} {
    if {![catch {::PortManager create pm -range {1010 1000}} pm]} {
        $pm destroy
        set pm "Construction did not fail!!"
    }
    set pm
} {Error in constructor: Invalid port range. 1010 - 1000}
#  Post test cleanup:

test 1.5 {late configuration} {} {
    set pm [::PortManager create pm]
    if {! [catch {$pm configure -range {1000 1010}} message]} {
        set message "Configure worked!!"
    }
    $pm destroy
    
    set message
    
} {Too late to configure range}

#  Tests related to port allocation:

test 2.1 {Ok port allocation} {} {
    set pm [::PortManager create pm]
    
    set port [$pm allocatePort "me" $tcl_platform(user)]
    set range [$pm cget -range]
    
    
    # the if below requires special knowledge of how PortManager works:
    if {$port == [lindex $range 1]} {
        set result 1
    } else {
        set result [list $port [lindex $range 1]]
    }
    $pm destroy
    
    set result
    
} {1}

test 2.2 {Over book ports} {} {
    set pm [::PortManager create pm -range {1000 1000}]
    
    set port1 [$pm allocatePort me guy]
    if {![catch {$pm allocatePort meagain guy} message]} {
        set result "Got port $message !!!"
    }
    $pm destroy
    
    set message
    
} {no free ports}

#  Tests related to freePort

test 3.1 {Good freePort} {} {
    set pm [::PortManager create pm -range {1000 1000}]
    
    set port1 [$pm allocatePort me guy]
    $pm freePort $port1
    
    set port2 [$pm allocatePort me guy2]
    $pm destroy
    
    if {$port1 == $port2} {
        set result 1
    } else {
        set result [list $port1 $port2]
    }
} {1}

test 3.2 {Bad freePort} {} {
    set pm [::PortManager create pm]
    
    if {![catch {$pm freePort 1234} msg]} {
        set msg "Free worked !!!"
    }
    $pm destroy
    set msg
    
} {The port is not an allocated port}

# Tests related to listPorts:

test 4.1 {empty list} {} {
    set pm [::PortManager create pm]
    
    set result [$pm listUsedPorts]
    $pm destroy
    
    set result
} {}

test 4.2 {list single port} {} {
    set pm [::PortManager create pm]
    set port [$pm allocatePort me him]
    
    set result [$pm listUsedPorts]
    $pm destroy
    
    lappend shouldBe [list $port me him]
    
    if {$shouldBe == $result} {
        set result 1
    } else {
        set result [list $shouldBe $result]
    }
    
} {1}

test 4.3 {list multiple ports} {} {
    set pm [::PortManager create pm]
    
    set port1 [$pm allocatePort me1 him1]
    set port2 [$pm allocatePort me2 him2]
    
    set result [$pm listUsedPorts]
    $pm destroy
    
    #  The list construction below requires internals knowlege of the port manager:
    
    set shouldBe  [list [list $port2 me2 him2] [list $port1 me1 him1]]
    
    if {$shouldBe == $result} {
        set result 1
    } else {
        set result [list $shouldBe $result]
    }
    
} {1}

#  The tests below have to do with the writeUsageFile function
#
test 5.1 {WriteTest} {} {
    #
    #  Allocate some ports...
    #
    set testFile usage.test
    
    set pm [::PortManager create pm]
    set port1 [$pm allocatePort me1 him1]
    set port2 [$pm allocatePort me2 him2]
    
    #  Write the usage
    
    set fd [open $testFile w]
    $pm writeUsageFile $fd
    close $fd
    
    #  We need the usage info to compare with the file:
    
    set usage [$pm listUsedPorts]
    
    #  Destroy the port manager.
    
    $pm destroy
    
    #  Exmine the file...
    
    set fd [open $testFile r]
    set contents [read $fd]
    close $fd
    
    #  Destroy the file
    
    file delete $testFile
    
    # Figure out what the file should contain and set the test result
    # accordingly:
    
    catch {unset shouldBe}
    foreach port $usage {
        append shouldBe "[lindex $port 0]\t[lindex $port 1]\t[lindex $port 2]\n"
    }
    if {$shouldBe == $contents} {
        set result 1
    } else {
        set result [list $shouldBe $contents]
    }
    
    
} {1}
::tcltest::cleanupTests