
<!-- chapter utilities -->
<chapter id="chapter.sequencer">
    <title>Sequencing runs</title>
    <para>
        The NSCL Run sequencer provides a mechanism for scheduling as series
        of timed runs.  Prior to the start of each run, the sequencer
        allows custom actions to be taken. While these actions normally
        set up hardware, there is no actual requirement this be the case.
        Any parameterizable action can be taken.
    </para>
    <para>
        For a full description of the sequencer, see its
        <link linkend="manpage.sequencer">reference manual page.</link>.
        This chapter gives an overview that describes how to use and configure
        the sequencer.
    </para>
    <section>
        <title>Configuring the sequencer.
        </title>
        <para>
            The sequencer requires the following configuration work:
            <itemizedlist>
                <listitem><para>
                    The actions executed prior to each run must be defined.
                    Each action accepts a parameter which becomes a column of the
                    run plan.
                </para></listitem>
                <listitem><para>
                    A run plan.  This is a specification of the parameters
                    for each  of the actions to be taken prior to starting a run.
                    The run plan is displayed to the user as a table which can
                    be edited.
                </para></listitem>
                <listitem><para>
                    The sequencer must be incorporated into the Readout GUI
                    (see the chapter on the Readout GUI).
                </para></listitem>
            </itemizedlist>
        </para>
        <para>
            Furthermore, each action must provide Tcl code that executes it and,
            optionally initializes its access to whatever it might control.
        </para>
        <para>
            The actions are defined in a file named
            <filename>sequencer.conf</filename> in the current working directory
            at the time the sequencer starts.  This file describes one action
            on each line.  Each sequencer line contains several whitespace
            separated fields.  In order:
            <itemizedlist>
                <listitem><para>
                    Name of the action.  This name will be passed to the
                    action's procedure. 
                </para></listitem>
                <listitem><para>
                    GUI name of the action.  This name will be used to label the
                    action's column in the run plan table.
                </para></listitem>
                <listitem><para>
                    Set action (optional):  This is the name of a Tcl <command>proc</command>
                    used to perform the action.  It is passed the name of the
                    action (value of the first column), and the value of the
                    action parameter.  If omitted no action is taken at the beginning
                    of the run.
                </para></listitem>
                <listitem><para>
                    Initialize action (optional):  This is the name of a Tcl
                    <command>proc</command> that is called as the sequencer initializes.
                    it is passed tha name of the action.
                </para></listitem>
            </itemizedlist>
        </para>
        <para>
            When the sequencer starts it will source in the Tcl script file
            <filename>sequencerActions.tcl</filename> from the current working
            directory.  This file contains arbitrary Tcl scripts.  It is expected
            to define all of the action
            <command>proc</command>s described in <filename>sequencer.config</filename>.
        </para>
        <para>
            Run plan files can be created graphically in the sequencer table.
            Simply edit each cell of the table with the appropriate
            parameter for that run and that action.    The
            <menuchoice><guimenu>File</guimenu><guimenuitem>Save...</guimenuitem></menuchoice>
            menu selection allows yoj to save run plans for later (re)use.
        </para>
        <para>
            Run plan files are plain text files.  Each line contains the parameterization
            of a run. Lines contain whitespace separated fields where each field is
            a parameter value for a run.
        </para>
        <para>
	   The run sequencer must be integrated with the Readout GUI.  This is
	   done by providing (or modifying an existing) 
	   <filename>ReadoutCallouts</filename>.
	   See the
	   Readout GUI reference
	   page
	   for information about how the readout GUI locates its 
	   <filename>ReadoutCallouts</filename>
	   file.
        </para>
	<para>
	   The sequencer is provided as a Tcl package located in the 
	   <filename>TclLibs</filename> directory tree of the NSCL DAQ
	   installation.  To load it you will need to have this 
	   directory in your Tcl Load path.  This can be done either
	   by setting the <varname>TCLLIBPATH</varname>
	   environment variable, or by having 
	   <filename>ReadoutCallouts.tcl</filename>
	   add the appropriate directory to the
	   <varname>auto_path</varname> loader list.
	</para>
	<para>
	  The example below takes a hybrid approach.  We assume you've 
	  set an environment variable <varname>DAQROOT</varname> to be
	  the top level directory of the NSCL DAQ installation.
	  At this NSCL, this might be 
	  <filename>/usr/opt/daq/9.0</filename> for example.
          The example shows additions to the top of the
	  <filename>ReadoutCallouts.tcl</filename> script
	  that make the sequencer package loadable, and
	  load it:
	</para>
	<example>
	   <title>Loading the sequencer package</title>
	   <programlisting>
set daqroot $env(DAQROOT)                <co id="chapter.sequencer.env" />
set libdir [file join $daqroot TclLibs]  <co id="chapter.sequencer.join" />

set auto_path [concat $libdir $auto_path] <co id="chapter.sequencer.path" />

package require runSequencer             <co id="chapter.sequencer.require" />

	   </programlisting>
	</example>
	<calloutlist>
	   <callout arearefs="chapter.sequencer.env">
	      <para>
	         The global <varname>env</varname> array contains a 
		 copy of the environment variables indexed by 
		 variable name.  This line gets the 
		 <varname>DAQROOT</varname> environement
		 variable.
              </para>
           </callout>
	   <callout arearefs="chapter.sequencer.join">
	      <para>
	          The Tcl <command>file join</command> joins 
		  filename path elements inserting the appropriate
		  path separator, and quoting if needed.  This
		  line constructs the name of the directory 
		  in which NSCL DAQ packages are found.
	      </para>
           </callout>
	   <callout arearefs="chapter.sequencer.path">
	      <para>
	         This line pre-pends the NSCL DAQ Tcl library
		 directory to the list of directories 
		 (<varname>auto_path</varname>) searched by
		 the Tcl.  Prepending ensures that if there are
		 any package name collisions, the NSCL DAQ
		 packages will be found first.
	      </para>
           </callout>
	   <callout arearefs="chapter.sequencer.require">
	      <para>
	         This line actually loads the sequencer package.
		 By the time this line finishes, the sequencer
		 configuration files, and action scripts will have
		 been read, and the sequencer user interface created.
              </para>
           </callout>
	</calloutlist>
    </section>
    <section>
        <title>Using the sequencer.</title>
        <para>
	   The sequencer GUI consists of a table called the
	   <firstterm>run plan table</firstterm> Edit this
	   table to set the parameters for each action item
           column for each run in the plan (runs are rows across
	   the table).
        </para>
	<para>
	   The
	   <menuchoice><guimenu>File</guimenu><guimenuitem>Save...</guimenuitem></menuchoice>
	   menu will save a run plan for later use.  If you've already created
	   a run plan, you can read it in with the
	   <menuchoice><guimenu>File</guimenu><guimenuitem>Open...</guimenuitem></menuchoice>	   
	   menu selection.
	   Finally the
	   <menuchoice><guimenu>File</guimenu><guimenuitem>Clear</guimenuitem></menuchoice>
	   menu selection clears the run plan table.
	</para>
	<para>
	  The length of each run is set by the length of the timed run section
	  on the main ReadoutGUI window.  To execute a run plan, 
	  click the <guibutton>Execute</guibutton> button on the 
	  run plan table window.  This button then is relabeled
	  <guibutton>Abort</guibutton>, and can be used to abort
	  a run plan if something goes wrong.
	</para>
	<para>
	   As the run plan executes, the run that is active is highlighted on
           the run plan table.
           When the run plan is complete, or if the run plan was
	   aborted,  the 
	   <guibutton>Abort</guibutton> is relabeled
	   <guibutton>Execute</guibutton> and will restart the
	   run plan if clicked.
	</para>
    </section>
</chapter>

<!-- /chapter -->

<!-- manpage 3tcl -->

<refentry id="manpage.sequencer">
    <refmeta>
        <refentrytitle>sequencer</refentrytitle>
        <manvolnum>3tcl</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>sequencer</refname>
        <refpurpose>
            Provide a ReadoutGui plugin for nscldaq 8.1 and later that can
            automate several data taking runs.
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <cmdsynopsis>
            <command>
 package require runSequencer               
            </command>
        </cmdsynopsis>

    </refsynopsisdiv>

    <refsect1>
        <title>DESCRIPTION</title>
        <para>
            The <command>runSequencer</command> package provides
            support for automating data taking runs of fixed duration.
            <command>runSequencer</command> is a ReadoutGui plugin that
            is compatible with nscldaq-8.1 and later.
        </para>
        <para>
            To operate, you must use the ReadoutGUI from nscldaq-8.1 or later.
            At the NSCL, you can do this by using
            <command>/usr/opt/daq/8.1/bin/ReadoutShell</command>.
            See USING for more information on how to use this plugin.
        </para>
        <para>
            For each run you can define a set of run parameters that are
            set through custom actions just prior to the start of the run.
            See CUSTOMIZING below for more information about how to setup
            these actions and how to specify the parameters.
        </para>
        <para>
            Run sequences are called <firstterm>Run plans</firstterm>.
            Run plans are files that can be loaded into the sequencer,
            edited, saved, and executed.  A run plan provides values for
            all of the parameters for each run in the sequence. 
        </para>
    </refsect1>
    <refsect1>
        <title>USING</title>
        <para>
            This section desribes using in two senses of the word:
            Incorporating the sequencerGui into ReadoutGUI, and
            operating the sequencer once it is installed. Setting up
            the parameter definitions and actions used by the sequencer
            are described in CUSTOMIZING below
        </para>
        <refsect2>
            <title>Incorporating SequencerGui into ReadoutGUI</title>
            <para>
                To incorporate the sequencer into ReadoutGUI you must use a
                <filename>ReadoutCallouts.tcl</filename> file to extend
                ReadoutGui.  This file must contain the line:
                <programlisting>
package require runSequencer
                </programlisting>
                Furthermore you must run a Readout GUI from nscldaq version 8.1 or later.
                At the NSCL, you can run the 8.1 version of the ReadoutGUI as follows:
                <command>/usr/opt/daq/8.1/bin/ReadoutShell</command>
                Note that when you run the Readout GUI, the <filename>sequencer.config</filename> and
                <filename>sequencerActions.tcl</filename> files are expected to exist.
                See CUSTOMIZING below for information about the contents of these files.
                see "FILES and ENVIRONMENT" for where they belong.
            </para>
        </refsect2>
        <refsect2>
            <title>Operating the sequencer GUI</title>
            <para>
                The sequencer creates a second window associated with the Readout GUI.
                This window consists mainly of a table with column labels defined by
                the <filename>sequencer.config</filename> file.  Each row of the
                table represents a run in the sequence of runs in a <firstterm>run plan</firstterm>
            </para>
            <para>
                You can edit the table to provide values for each of the parameters (columns)
                for each step in the run sequence.  Navigate in the table by using the arrow
                keys, the mouse or the tab and shift tab keys.  Once you are happy with your
                run plan you can save it using the
                <menuchoice><guimenu>File</guimenu><guimenuitem>Save...</guimenuitem></menuchoice>
                menu command.
            </para>
            <para>The <menuchoice><guimenu>File</guimenu><guimenuitem>Open...</guimenuitem></menuchoice>
                menu command allows you to read in a plan from file.  This plan can be edited, and
                saved. <menuchoice><guimenu>File</guimenu><guimenuitem>Clear...</guimenuitem></menuchoice>
                clears the table.
            </para>
            <para>
                To execute a run plan, use the ReadoutGUIPanel to set the length of each run.
                (The sequencer will turn on timed runs when you start the sequence).  Then
                click the <guibutton>Execute Plan</guibutton> button to start the sequence.
                The button is relabeled <guibutton>Abort Plan</guibutton> while the plan is running.
                Clicking it while the plan is running ends the active run and stops the sequence.
                If event recording was enabled for an aborted run plan you are given the option
                to discard all the event data that was taken for the sequence.
            </para>
        </refsect2>
            
    </refsect1>
    <refsect1>
        <title>CUSTOMIZING</title>
        <para>
            The sequencer is completely customizable.  The label for each column and actions to
            take to set each column are defined by the <filename>sequencer.config</filename> file.  This file is a text
            file.  Each line in the file describes a column.  Blank lines are ignored as are
            lines for which the first non-blank character is a hash (#) character.
            Fields in a line are separated by whitespace. Whitespace can be incorporated
            into a field either by quoting the field with double quotes (") or curly
            brackets (for example {this has spaces}).
        </para>
        <para>
            Each column definition line of <filename>sequencer.config</filename> has fields in the
            following order.
            <variablelist>
                <varlistentry>
                    <term>Column Name</term>
                    <listitem>
                        <para>
                            The text that labels the column in the run plan.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>set action</term>
                    <listitem>
                        <para>
                            A tcl command that is executed when it is time to change the value
                            of the item in the column. The column name and the value of that
                            cell of the table are appended to the command.  If the
                            set action is blank, no action is taken.  The
                            action function must return 0 on success or else
                            the run plan will be aborted prior to starting the
                            run for the failing step.  Note that if an action
                            can return and error it should indicate to the user
                            what the error was.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>initialize action</term>
                    <listitem>
                        <para>A tcl command that is executed when the sequencer is set up, before
                            executing any run plan.  This is intended to be used for any
                            one-time intialization required to access the item controlled by
                            the table.   The column name is appended to this command when it is
                            called.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            See EXAMPLES for examples of the sequencer.config file.  See "FILES and ENVIRONMENT"
            for information about where this file belongs.
        </para>
        <para>
            The actions defined in the <filename>sequencer.config</filename> file must come
            from somewhere.   During initialization, the sequencer sources the
            file <filename>sequencerActions.tcl</filename> this file is a Tcl script that
            can include procedure definitions, data definitions, etc.   Normally it provides
            the tcl commands that are specified as actions in the <filename>sequencer.config</filename>
            file.  For a sample <filename>sequencerActions.tcl</filename> file see
            EXAMPLES.  For information about how the sequender finds this file, see
            "FILES and ENVIRONMENT"
        </para>
    </refsect1>
    <refsect1>
        <title>FILES and ENVIRONMENT</title>
        <para>
            The sequencer must locate a column configuration file and a script that defines
            the actions used by that file. By default, these files are:
            <variablelist>
                <varlistentry>
                    <term><filename>./sequencer.config</filename></term>
                    <listitem>
                        <para>
                            The column configuration file.  By default this is located in the
                            current working directory of the sequencer when it is started.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>./sequencerActions.tcl</filename></term>
                    <listitem>
                    <para>
                        A script that defines actions used by the column configuration file.
                        By default, this is sourced from the current working directory of the
                        sequencer when it is started.
                    </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>
        <para>
            Environment variables can alter the location and names of these files:
            <variablelist>
                <varlistentry>
                    <term><envar>SEQCONFIGDIR</envar></term>
                    <listitem>
                        <para>
                            If defined, this environment variable is the directory from which
                            the two configuration files are loaded for example:
                            <command>export SEQCONFIGDIR=~/config</command>
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><envar>SEQCONFIGFILE</envar></term>
                    <listitem>
                        <para>
                            If defined, this environment variable is the name of the file
                            used to configure the columns.  If, for example, you:
                            <command>export SEQCONFIGDIR=~/config</command>
                            and
                            <command>export SEQCONFIGFILE=columns.def</command>
                            The column configuration file loaded will be
                            <filename>~/config/columns.def</filename>.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><envar>SEQACTIONFILE</envar></term>
                    <listitem>
                        <para>
                            If defined, this environment variable is the name of the
                            action script file that defines the actions referenced in the
                            column configurationfile.
                            If, you have
                            <command>export SEQCONFIGDIR=~/config</command>
                            and
                            <command>export SEQACTIONFILE=actions.tcl</command>,
                            The action script file will be sourced from
                            <filename>~/config/actions.tcl</filename>.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>
    </refsect1>
    <refsect1>
        <title>EXAMPLES</title>
            <example>
                <title>Action script example</title>
                <para>
                    This example shows part of an action script that defines the actions
                    <function>epicsAccess</function> and <function>epicsSet</function> that
                    provide actions to access epics channels.
                    <programlisting>
package require epics
proc epicsSet {name value} {
  set status [catch  {$name set $value}] msg
  if {$status != 0} {
     tk_msgBox -message $msg -icon error -title {Epics channel set error}
  } 
  return $status
  
}
proc epicsAccess name {
    epicschannel $name
}

                    </programlisting>
                </para>
            </example>
            <example>
                <title>Sequencer column configuration file</title>
                <para>
                    The sequencer file below defines a set of columns that are all
                    epics channels:
                    <programlisting>
# Column         set_action  init_action

P222ET_TARGET    epicsSet    epicsAccess
P222ER           epicsSet    epicsAccess
FLTCHAN73        epicsSet    epicsAccess
P#5:406353       epicsSet    epicsAccess

                    </programlisting>
                Not the use of blank lines and comment lines.
                </para>
            </example>
            <para>
                The directory <filename>examples/sequencer</filename> under the
                installation directory of the nscl daq includes several sample files.
            </para>
    </refsect1>
</refentry>

<!-- /manpage -->
