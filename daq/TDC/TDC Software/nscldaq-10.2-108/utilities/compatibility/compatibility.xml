<!-- chapter utilities -->
<chapter id="compatibilty">
    <title>Compatibility utilities</title>
    <para>
        The event format of the ring buffer data acquisition system is fundamentally
        different from that of earlier NSCL data acquisition systems.  In order
        to ease the transition to the ring buffer system, several utilities'
        are provided that allow user software written for use with spectrodaq
        to operate unmodified.
    </para>
    <para>
        The key utitity is <application>compatibilitybuffer</application>.
        This is a unix filter.  <application>compatibilitybuffer</application>
        accepts a stream of ring items on its standard input and produces
        a stream of spectrodaq style nscl data buffers on its output.
        A trivial application of this program allows you to convert a ring
        event file to a spectrodaq event file as shown below:
    </para>
    <example id="compatibilitybuffer-ex1">
        <title>Converting a ring buffer event file with compatibilitybuffer</title>
        <titleabbrev id="compatibilitybuffer-ex1-short">Converting Event file</titleabbrev>
        <programlisting>
$DAQROOT/bin/compatibilitybuffer &lt;run-1234-00.evt &gt;run-1234-4096.evt
        </programlisting>
    </example>
    <para>
        Other utilities and pipeline creating scripts allow you to directly
        write spectrodaq style event files when running your experiment,
        as well providing an SpecTcl pipeline data source that accepts ring items
        and provides spectrodaq style buffers to SpecTcl.
    </para>
    <para>
        This section provides a brief tour of the compatibility utilities.
        See the <literal>1compatibility</literal> reference section for
        detailed descriptions of each utility.
    </para>
    <section>
        <title>Format conversion with <application>compatibilitybuffer</application></title>
        <para>
            Compatibility utilities were build with a toolkit approach in mind.
            This allows you to build unix pipelines that compose these utilities
            to easily build actual applications.
        </para>
        <para>
            The core tool in the compatibility toolbox is <application>compatibilitybuffer</application>
            which takes a stream of ring buffer items and transforms it into a
            string of spectrodaq style data buffers.  You can specify the size of
            the output buffer using the <option>--buffersize</option> option.
            For example if, in the example
            <xref linkend="compatibilitybuffer-ex1" endterm="compatibilitybuffer-ex1-short" />,
            we wanted to write data with a 16384 byte buffersize we would instead write:
        </para>
        <example>
            <title>Converting ring buffer data to a 8Kword (16Kbyte) old style event file</title>
            <programlisting>
$DAQROOT/bin/compatibilitybuffer --buffersize=16384 &lt;run-1234-00.evt &gt;run-1234-4096.evt 
            </programlisting>
        </example>
        <para>
            There is not a perfecdt match between ring buffer data and
            spectrodq buffered data. This is because:
        </para>
        <orderedlist>
            <listitem><para>
                Sizes in ring buffer items are always 32 bits wide while buffer
                sizes and event lengths in the spectrodaq buffered data are only
                16 bits wide.
            </para></listitem>
            <listitem><para>
                Sampled clients in ring buffer data count event triggers and
                can determine the sampling fraction by looking at the ratio of
                triggers seen to triggers emitted as documented by the
                <literal>PHYSICS_EVENT_COUNT</literal> ring items it sees.
                In spectrodaq bufffered data, each buffer has a sequence number
                and the sampled fraction is approximated by counting event buffers
                and taking the ratio of the event buffers seen to the last
                sequence number seen.
                </para>
            </listitem>
                    
        </orderedlist>
        <para>
            Due to these differences; <literal>PHYSICS_EVENT</literal> items must
            be shorter than 64Kwords of data.  Similarly you cannot choose
            a <option>--buffersize</option> larger than <literal>131070</literal>.
        </para>
        <para>
            Sequence numbers are computed from the sampling fraction seen by
            <application>compatibilitybuffer</application>.  If not all events are
            seen, you will see sequence number skips that will allow consumers
            of the output data to approximate the sampling fraction.
        </para>
    </section>
    <section>
        <title>Writing event files with <application>compatibilitylogger</application></title>
        <para>
            The <application>compatibilitylogger</application> is a unix pipeline
            element that accepts old style NSCL buffers and produces an old
            style event file for a single run.  Normally this is the end stage of
            a pipline consisting of <application>ringselector</application>,
            <application>compatibilitybuffer</application> and itself used
            to write event files in old spectrodaq format.
        </para>
        <para>
            Once an end of run event is seen, the event file is closed and
            the program exits.  Event files are segmented just as they are in
            both systems.  Event file segments are no larger than 2Gbytes. This
            allows them to be properly accessed over all versions of NFS.
        </para>
        <para>
            Since the pipelines that use <application>compatibilitylogger</application>
            are intended to be used with the <application>ReadoutShell</application>,
            event filenames match those used by the ring buffer daq rather than
            those used by the spectrodaq system.
            This allows the <application>ReadoutShell</application> to properly
            maintain the file/directory structure of the <filename>stagearea</filename>.
        </para>
        <para>
            Below is a sample pipeline that takes as input a ring buffer event file
            and produces the corresponing nscl buffer event file:
        </para>
        <example>
            <title>Using compatibilitylogger to convert event files</title>
            <programlisting>
cd OldEventFiles
compatibilitybuffer &lt;~/stagerea/complete/run-0123-00.evt | compatibilitylogger 
            </programlisting>
        </example>
        <para>
            The example assumes the existence of a subdirectory
            <filename>OldEventFiles</filename>.
        </para>
    </section>
    <section>
        <title>Convenience scripts</title>
        <para>
            The core applications discussed so far can be composed with e.g.
            <application>RingSelector</application> to create many useful
            applications.  This section describes several scripts that have
            been written and installed that provide the most commonly used
            applications.
        </para>
        <formalpara>
            <title>eventlog-compat</title>
            <para>
                Provides a script that creates a pipeline suitable for eventlogging
                through the ReadoutShell.  If, in your <filename>.bashrc</filename>
                you define the environment variable <literal>EVENTLOGGER</literal>
                to be <literal>$DAQROOT/bin/eventlog-compat</literal>, the ReadoutGui
                will run this script rather than the standard Ring buffer event
                logger.  This will result in ring buffer data being logged
                directly in spectrodaq formatted event files.
            </para>
        </formalpara>
        <formalpara>
            <title>spectcldaq</title>
            <para>
                This script mimics the SpecTcl data source provided by
                the spectrodaq data acquisition systems installations.
                It requires a single command parameter, the URI of the ring
                from which it will take data.  Below is an
                <function>attachOnline</function> <command>proc</command>
                that accepts a hostname as a parameter and attaches to the
                default ring for the current user on that host.
                It is assumed the environment variable DAQROOT points to the
                ring buffer daq installation.
            </para>
        </formalpara>
        <example>
            <title>Attaching SpecTcl to ring buffers in compatibility mode</title>
            <programlisting>
proc attachOnline host {
    global tcl_platform
    global env

    set user    $tcl_platform(user)
    set daqroot $env(DAQROOT)
    set spectcldaq [file join $daqroot bin spectcldaq] 

    attach -pipe $spectcldaq tcp://$host/$user
    start

}                
            </programlisting>
        </example>
        <formalpara>
            <title>spectcldaq.server</title>
            <para>
                In some cases you'd like to sample data from the ring buffer
                system to a system that is not running the data acuisition
                system software.  In native mode, this can be done by
                contacting the ring master server in the source system
                and requesting that it pipe data to your system.
            </para>
        </formalpara>
        <para>
            If, however you want this data to be in spectrodaq buffer format,
            you can start the <application>spectcldaq.server</application>.
            This TCP/IP server listens for connection on a specfied port and
            when contacted sets up a pipeline to send ring data in spectrodaq
            buffer format across the socket.
        </para>
        <para>
            Suppose for example you want to export data to a SpecTcl that is
            running in a system that does not run nscldaq.  Assuming that
            <literal>DAQHOST</literal> specifies the host that is taking data;
            on one of the data taking systems:
        </para>
        <informalexample>
            <programlisting>
$DAQROOT/spectcldaq.server tcp:/$DAQHOST/$LOGNAME 22222
            </programlisting>
        </informalexample>
        <para>
            spectcldaq.server is now listening for connections on port
            <literal>22222</literal>.  In most systems a program called
            <application>netcat</application> is or can be installed to
            connect to a server/port and pipe the data sent to it on its
            stdout.  This makes an ideal pipe data source for SpecTcl:
        </para>
        <informalexample>
            <programlisting>
attach -pipe netcat $myserverhost 22222'
start
            </programlisting>
        </informalexample>
        <para>
            Where <varname>myserverhost</varname> is the name of the host that
            is runnning <application>spectcldaq.server</application>
        </para>
    </section>
    <section>
        <title>BufferToRing</title>
        <para>
            Sometimes you will have to take emitters of NSCL Buffered data and
            translate them into ring items.  BufferToRing is a filter that
            takes NSCL event buffers on <filename>stdin</filename> and emits
            ring items on <filename>stdout</filename>.  This allows you to pipe
            old event files into a ring buffer SpecTcl.  With the assistance
            of stdintoring you can also pipe old data into a ringbuffer.
        </para>
    </section>
</chapter>
<!-- /chapter -->


<!-- manpage 1compatibility -->
      <refentry id="manpage_compatibilitybuffer">
        <refmeta>
           <refentrytitle>compatibilitybuffer</refentrytitle>
           <manvolnum>1compatibility</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>compatiblitybuffer</refname>
           <refpurpose>Filter ring items to spectrodaq buffers</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
          <command>
compatibilitybuffer <optional>options</optional>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            Filters ring buffer items from standard input to spectrodaq
            buffers on standard output.  Buffer sequence numbers are generated
            in such a way that they allow clients to approximate
            the sampling fraction if physics events are sampled into the application.
            Event sizes get truncated to 16 bits so that existing clients can
            analyze the output.
           </para>
           <para>
            The default output buffer size is <literal>8192</literal> bytes, however
            see the <option>--buffersize</option> switch in OPTIONS below.
           </para>
           <para>
            The program will continue to run until it detects an EOF on either
            stdin or stdout.
           </para>
        </refsect1>
        <refsect1>
           <title>
              OPTIONS
           </title>
           <variablelist>
            <varlistentry>
                <term><option>--buffersize</option>=<replaceable>buffer-size-in-bytes</replaceable></term>
                <listitem>
                    <para>
                        Allows the default buffer size of <literal>8182</literal> bytes
                        to be overridden.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--help</option></term>
                <listitem>
                    <para>
                        Outputs short form help to the console and exits immediately.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--help</option></term>
                <listitem>
                    <para>
                        Outputs the version of the program and exits immediately.
                    </para>
                </listitem>
            </varlistentry>
            
           </variablelist>
        </refsect1>

      </refentry>
      
      <refentry id="manpage_compatibilitylogger">
        <refmeta>
           <refentrytitle>compatibilitylogger</refentrytitle>
           <manvolnum>1compatibility</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>compatibilitylogger</refname>
           <refpurpose>Create spectrodaq formatted event log files.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
compatibilitylogger <optional>options</optional>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            Accepts NSCL Buffers on stdin.  Once the first begin buffer is
            seen an event file is created.  Buffers are accepted until an
            end run buffer or an end file on stdin is encountered at which time
            the once that buffer is written to file, the current run file  is closed.  All buffers are written to the
            current event file.
           </para>
           <para>
            If the current event file has exceeeded a threshold that is a bit less
            than 2Gbytes, the current event file is closed and a new event file
            is opened as the next segment of the run's event file set.
            Event files are named in accordance with the ring buffer DAQ event file
            naming convention:  <literal>run-rrrr-ss.evt</literal>. Where
            <literal>rrrr</literal> is the run number zero filled to four digits
            (e.g. run 5 is 0005), and <literal>ss</literal> is the segment number
            zero filled to two digits.
           </para>
           <para>
            By default, the program expects its input buffers to be <literal>8192</literal>
            bytes long.  See, however the <option>--buffersize</option> option
            described in the OPTIONS section.
           </para>
        </refsect1>
        <refsect1>
           <title>
              OPTIONS
           </title>
           <variablelist>
            <varlistentry>
                <term><option>--buffersize</option>=<replaceable>size-in-bytes</replaceable></term>
                <listitem>
                    <para>
                        Overrides the default buffer size with its value.
                        The buffersize must match the actual buffer size of the
                        stdin stream of buffers or else the program will likely
                        fail in unpredictable ways.
                    </para>
                </listitem>
            </varlistentry>
             <varlistentry>
                <term><option>--help</option></term>
                <listitem>
                    <para>
                        Outputs short form help to the console and exits immediately.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--help</option></term>
                <listitem>
                    <para>
                        Outputs the version of the program and exits immediately.
                    </para>
                </listitem>
            </varlistentry>

           </variablelist>
        </refsect1>

      </refentry>

      <refentry id="manpage-eventlog-compat">
        <refmeta>
           <refentrytitle>eventlog-compat</refentrytitle>
           <manvolnum>1compatibility</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>eventlog-compat</refname>
           <refpurpose>Provide event logger pipeline for use with ReadoutGUI.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
eventlogcompat <optional>options</optional>
          </command>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            This is a shell script that is suitable for use as a ReadoutGUI
            (ReadoutShell) event logger. See the EXAMPLE section below
            to see how to substitute this event logger for the default event
            logger.
           </para>
           <para>
            The shell script actually  sets up a pipeline of
            <application>ringselector</application>, <application>compatibilitybuffer</application>,
            and <application>compatibilitylogger</application> to handle the
            production of event log files.
           </para>
        </refsect1>
        <refsect1>
           <title>
              OPTIONS
           </title>
           <variablelist>
            <varlistentry>
                <term><option>--path</option>=<replaceable>event-file-directory</replaceable></term>
                <listitem>
                    <para>
                        Specifies in which directory the event file set for
                        the run will be created (remember only a single
                        run will be logged, normally the ReadoutShell starts
                        up eventlog each time a recorded run starts).
                    </para>
                    <para>
                        The script also honors the <literal>BUFFERSIZE</literal>
                        environment variable creating event files that
                        use the buffer size in bytes specified by that
                        variable.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--source</option>=<replaceable>ring-url</replaceable></term>
                <listitem>
                    <para>
                        Specifies the data source in terms of a ring buffer
                        URL.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--oneshot</option></term>
                <listitem>
                    <para>
                        This option is accepted for compatibility purposes.
                        The script only functions in the one-shot mode however
                        so the presence/absence of this switch does not
                        change how the script operates.
                    </para>
                </listitem>
            </varlistentry>
           </variablelist>
        </refsect1>
        <refsect1>
            <title>EXAMPLE</title>
            <para>
                The following example starts up the ReadoutShell at the
                NSCL under the 10.0 version of the ring buffer system
                using the compatibility event logger to produce
                spectrodaq formatted event files:
            </para>
            <informalexample>
                <programlisting>
export EVENTLOGGER=/usr/opt/daq/10.0/bin/eventlog-compat
/usr/opt/daq/10.0/bin/ReadoutShell -host=spdaq44 -path=/home/fox/test/Readout
                </programlisting>
            </informalexample>
            <para>
                The <literal>EVENTLOGGER</literal> environment variable,
                if set overrides the default event logger and provides
                a replacement.  The eventlogger program must
                accept all of the switches described above.
            </para>
        </refsect1>
      </refentry>
      <refentry id="manpage-spectcldaq-compat">
        <refmeta>
           <refentrytitle>spectcldaq</refentrytitle>
           <manvolnum>1compatibility</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>spectcldaq</refname>
           <refpurpose>Pipe data source for SpecTcl in spectrodaq buffer mode.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
spectcldaq <replaceable>ring-url</replaceable>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
              This script sets up a pipe data source consisting of
              <application>ringselector</application> and
              <application>compatibilitybuffer</application>.  The result is
              a pipe data source from the ring buffer daq system that presents
              data to SpecTcl in spectrodaq buffer format.  This allows
              existing SpecTcl data analysis software to attach to the ring buffer
              data acquisition system without modification to anything but the
              attach scripts.
           </para>
           <para>
            The <replaceable>ring-url</replaceable> parameter provides the
            URL for the ring into which the readout program is putting data.
            This is of the form: tcp://<replaceable>hostname</replaceable>/<replaceable>localringname</replaceable>
            where <replaceable>hostname</replaceable> is the name of the
            host on which your Readout program is running and
            <replaceable>localringname</replaceable> is the name of the ring into
            which Readout is putting data.  By default the ring name is
            the username under which Readout is running which, in turn, is usually
            your logged in username.  Note that if Readout is running in the
            same host as this program a host of <literal>localhost</literal> is more
            efficient than specifying the host name itself.
           </para>
        </refsect1>
        <refsect1>
            <title>ENVIRONMENT</title>
            <para>
                The <literal>BUFFERSIZZE</literal> environment variable sets the
                size of the spectrodaq buffers emitted in bytes.   This
                defaults to <literal>8192</literal>.
            </para>
        </refsect1>
        <refsect1>
           <title>
              EXAMPLE
           </title>
            <para>
                The example below shows a proc that attaches SpecTcl to a ring
                buffer using spectcldaq and starts analyzing data from that ring.
                It is assumed that the environment variable DAQROOT is defined
                to point to the root of the ring buffer data acuisition system
                (e.g. <filename>/usr/opt/daq/10.0</filename>).  The host is a
                parameter to the procecdure:
            </para>
            <example>
                <title>Attaching SpecTcl to a ring buffer in compatibility mode</title>
                <programlisting>
proc attachOnline host {
    global tcl_platform
    global env

    set user    $tcl_platform(user)
    set daqroot $env(DAQROOT)
    set spectcldaq [file join $daqroot bin spectcldaq]

    attach -pipe $spectcldaq tcp://$host/$user
    start

}
                </programlisting>
            </example>
            <para>
                Note that the variables <varname>tcl_platform</varname> and
                <varname>env</varname> are built-in Tcl variables.
                <varname>tcl_platform</varname> is an array whose elements are
                various platform specific itesm the <literal>user</literal> element
                contains the logged in user name.  <varname>env</varname> is an
                array whose indices are environment variable names and whose
                values are the values of those variables.
            </para>
        </refsect1>

      </refentry>
      <refentry id="spectcldaq.server">
        <refmeta>
           <refentrytitle>spectcldaq.server</refentrytitle>
           <manvolnum>1compatibility</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>spectcldaq.server</refname>
           <refpurpose>TCP/IP server of ring data in spectrodaq format.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
            <command>
spectcldaq.server <replaceable>ring-url</replaceable> <replaceable>port</replaceable>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            The spectrodaq data acquisition system has a server component that
            allowes data to be hoisted out of the data acquisition systems to systems
            that don't run NSCLDAQ.  One use of this is to provide data to the
            S800 Mac OS-X computer in datau-6.  <application>spectcldaq.server</application>,
            provides this functionality for the ring buffer system in spectrodaq
            compatibility mode.
           </para>
           <para>
            In spectrodaq, because the data distribution system was global it
            was possible to run the server from the <firstterm>inetd super server</firstterm>.
            Because in the ring buffer system it is possible for several data
            distribution paths to run simultaneously, this is no longer possible
            for the ring buffers data acquisitino system.  Users that intend
            to hoist data to non NSCLDAQ systems must therefore start the server
            prior to forming the first client connection.
           </para>
           <para>
            The server itself is a very small Tcl script that, on receiving a
            connection sets up the same pipeline that <application>spectcldaq</application>
            sets up.
           </para>
        </refsect1>
        <refsect1>
           <title>
              PARAMETERS
           </title>
           <variablelist>
            <varlistentry>
                <term><replaceable>ring-url</replaceable></term>
                <listitem>
                    <para>
                        Specifies the URL of the ring buffer from which
                        the server will set up pipelines.  The URL is of the
                        form tcp://<replaceable>hostname</replaceable>/<replaceable>ringname</replaceable>.
                        <replaceable>hostname</replaceable> is the host in which
                        the data source is running.   If the data source is running
                        in the same host as the server use <literal>localhost</literal>.
                        <replaceable>ringname</replaceable> is the name of the ring
                        in which the data are being put by the readout program.
                        By default this is your username.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><replaceable>port</replaceable></term>
                <listitem>
                    <para>
                        The port on which you want the server to listen for
                        connections. This must be a port on which nothing else
                        is listening for connections.  It should be greater than
                        <literal>1024</literal> and should not be in the range
                        <literal>30000-31000</literal> as those ports are
                        managed by the NSCLDAQ port manager name service.
                    </para>
                </listitem>
            </varlistentry>
           </variablelist>
        </refsect1>
        <refsect1>
            <title>ENVIRONMENT</title>
            <variablelist>
                <varlistentry>
                    <term><literal>BUFFERSIZE</literal></term>
                    <listitem>
                        <para>
                            Specifies the buffer size in bytes.  If not defined
                            this defaults to <literal>8192</literal>
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect1>
        <refsect1>
            <title>EXAMPLES</title>
            <para>
                The first example starts the server so that it can pipe
                data from the local system's ring named after the logged in user.
                we will use the port <literal>1100</literal> for our example.
            </para>
            <example>
                <title>Running spectcldaq.server</title>
                <programlisting>
$DAQROOT/bin/spectcldaq.server tcp://localhost/`whoami` 1100
                </programlisting>
            </example>
            <para>
                The second example is a Tcl proc that uses the source in the
                first example to provide data for a pipe data source.
                This depends on the existence of a widely distributed program
                called <application>netcat</application>.
            </para>
            <example>
                <title>Connecting to spectcldaq.server</title>
                <programlisting>
proc attnet {host port} {
    attach -pipe netcat $host $port
    start
}
                </programlisting>
            </example>
        </refsect1>
      </refentry>
      <refentry id="compatibility_buffertoring">
        <refmeta>
           <refentrytitle>BufferToRing</refentrytitle>
           <manvolnum>1compatibility</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>BufferToRing</refname>
           <refpurpose>Convert old buffered data to ring buffer format.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
$DAQROOT/bin/BufferToRing <optional>buffer-size</optional>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            Converts NSCLDAQ buffered data into ring items.  Input is always
            taken from <filename>stdin</filename> and output ring items are
            emitted on <filename>stdout</filename>.  This allows you, by constructing
            appropriate pipelines or using I/O redirection to convert event files
            from buffered to ring format.  Buffered data can be turned into a
            SpecTcl piped data source and can, with the help of
            stdintoring be placed in a ringbuffer.
           </para>
           <para>
            The program takes an optional parameter; <parameter>buffer-size</parameter>
            which is the size of the input buffer in bytes.  The default is
            <literal>8192</literal> which covers most of the buffered event
            files created by versions of nscldaq prior to 10..0.
           </para>
        </refsect1>

      </refentry>

    

<!-- /manpage -->