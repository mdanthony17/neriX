#  DAQ parameters configuration test.
set here [file dirname [info script]]
source [file join $here Configuration.tcl]
source [file join $here DAQParameters.tcl]

package require DAQParameters
package require tcltest
package require des

#  Configuration items.

set daqParameters {SourceHost ReadoutPath FtpHost BufferSize}

# Utility functions

proc clearDAQParameterConfiguration {} {
    global daqParameters
    foreach parameter $daqParameters {
        catch {unset ::configuration::$parameter}
    }
}

proc dumpDAQParameters {} {
    global daqParameters

    foreach parameter $daqParameters {
        lappend values [Configuration::get $parameter]
    }
    return $values
}

#  Testing the initialization

tcltest::test DAQParameters-1.0 {DAQParameters::setDefaults} {
    clearDAQParameterConfiguration

    DAQParameters::setDefaults

    dumpDAQParameters

} {localhost {} {} 8192}

tcltest::test DAQParameters-1.1 {DAQParameters::environmentOverrides} {
    global env
    global tcl_platform
    set env(DAQHOST) {thechad.nscl.msu.edu}
    set env(RDOFILE) {/this/is/a/test}
    set env(EVTHOST) {ftp.nscl.msu.edu}

    clearDAQParameterConfiguration
    DAQParameters::setDefaults
    DAQParameters::environmentOverrides

    set params [dumpDAQParameters]


}  {thechad.nscl.msu.edu /this/is/a/test ftp.nscl.msu.edu 8192}

#  Source host manipulation.

tcltest::test DAQParameters-2.0  {DAQParameters::sourceHostIs} {
    clearDAQParameterConfiguration

    DAQParameters::sourceHostIs thechad.nscl.msu.edu

    Configuration::get SourceHost
} thechad.nscl.msu.edu

tcltest::test DAQParameters-2.1 {DAQParameters::getSourceHost} {
    clearDAQParameterConfiguration

    DAQParameters::sourceHostIs spice.nscl.msu.edu
    DAQParameters::getSourceHost
} spice.nscl.msu.edu

#  Readout path:

tcltest::test DAQParameters-3.0 {DAQParameters::setReadoutPath valid filename} {
    clearDAQParameterConfiguration

    DAQParameters::readoutPathIs [info nameofexecutable]

    Configuration::get ReadoutPath
} [info nameofexecutable]

tcltest::test DAQParameters-3.1 {DAQParameters::setReadoutPath not executable} {
    clearDAQParameterConfiguration

    if {![catch {DAQParameters::readoutPathIs [info script]} msg]} {
        set msg "Non executable worked:"
    }
    set msg
} {DAQParameters::NotExecutable}

tcltest::test DAQParameters-3.2 {DAQParameters::setReadoutPath not found} {
    clearDAQParameterConfiguration

    if {![catch {DAQParameters::readoutPathIs ./nosuchfile} msg]} {
        set msg {Nonexistent file worked}
    }

    set msg

} {DAQParameters::NotFound}

tcltest::test DAQParameters-3.3 {DAQParameters::setReadoutPath round trip} {
    clearDAQParameterConfiguration

    DAQParameters::readoutPathIs [info nameofexecutable]
    DAQParameters::getReadoutPath

} [info nameofexecutable]

#  FtpServer manipulation .. There's an assumption that ftp.nscl.msu.edu is reachable and
#  a valid ftp server.

tcltest::test DAQParameters-4.0 {DAQParameters::ftpHostIs good host} {
    clearDAQParameterConfiguration

    DAQParameters::ftpHostIs ftp.nscl.msu.edu

    Configuration::get FtpHost
} {ftp.nscl.msu.edu}

tcltest::test DAQParameters-4.1 {DAQParameters::ftpHostIs not an ftp server} {
    clearDAQParameterConfiguration

    if {![catch {DAQParameters::ftpHostIs nsclgw1.nscl.msu.edu} msg]} {
        set msg {Bad  ftp host worked}
    }
    set msg
} {DAQParameters::HostNotFTPServer}

tcltest::test DAQParameters-4.2 {DAQParameters::ftpHostIs round trip} {
    clearDAQParameterConfiguration

    DAQParameters::ftpHostIs ftp.nscl.msu.edu

    DAQParameters::getFtpHost

} {ftp.nscl.msu.edu}

#  Password handling tests.

tcltest::test DAQParameters-5.0 {DAQParameters::passwordIs} {
    clearDAQParameterConfiguration

    DAQParameters::passwordIs testing

    append key $tcl_platform(user) nscldaq {ron fox}
    set cleartext [::DES::des -mode decode -key $key $configuration::Password]
    set cleartext [string trim $cleartext "\0"]
} {testing}

tcltest::test DAQParameters-5.1 {DAQParameters::passwordIs round trip} {
    clearDAQParameterConfiguration

    DAQParameters::passwordIs testroundtrip
    DAQParameters::getPassword
} testroundtrip

tcltest::test DAQParameters-5.2 {DAQParmaeters::passwordIs key mismatch} {
    clearDAQParameterConfiguration

    DAQParameters::passwordIs testkeymismatch mykey
    set bad [DAQParameters::getPassword];            # No user key.
    if {$bad == "testkeymismatch"} {
        set result {bad key ok}
    } else  {
        set result 1
    }
    set result
} 1

tcltest::test DAQParameters-5.2 {DAQParameters::setEncryptedPasswd} {
    clearDAQParameterConfiguration

    DAQParameters::setEncryptedPasswd {this is my password}

    set configuration::Password
} {this is my password}

tcltest::test DAQParameters-5.3 {DAQParameters::setEncryptedPasswd round-trip} {
    clearDAQParameterConfiguration

    DAQParameters::setEncryptedPasswd {clear text}

    DAQParameters::getEncryptedPasswd
} {clear text}

# Buffersize manipulation:

tcltest::test DAQParameters-6.0 {DAQParameters::setBuffersize ok value} {
    clearDAQParameterConfiguration

    DAQParameters::setBufferSize 16384
    set configuration::BufferSize
} 16384
tcltest::test DAQParameters-6.1 {DAQParameters::setBuffersize bad value} {
    clearDAQParameterConfiguration

    if {![catch {DAQParameters::setBufferSize 64} msg]} {
        set result {Ok Bad buffersize}
    }
    set msg

} {DAQParameters::InvalidSize}

tcltest::test DAQParameters-6.2 {DAQParameters::setBuffersize round trip} {
    clearDAQParameterConfiguration

    DAQParameters::setBufferSize 1024
    DAQParameters::getBufferSize
} 1024

unset env(DAQHOST)
unset env(EVTHOST)
unset env(RDOFILE)

tcltest::cleanupTests
