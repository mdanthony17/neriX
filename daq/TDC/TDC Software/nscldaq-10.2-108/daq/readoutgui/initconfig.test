#  DAQ parameters configuration test.
set here [file dirname [info script]]
source [file join $here Configuration.tcl]
source [file join $here InitializeConfiguration.tcl]

package require InitializeConfiguration
package require tcltest


#  Setup required for these tests:

set autopsaved $auto_path
lappend auto_path $here

# Ensure we have an up-to-date index file.

if {[file exists pkgIndex.tcl]} {
    file rename pkgIndex.tcl pkgIndex.tcl.saved
}
pkg_mkIndex . *.tcl
package provide testing 1.0
package provide larry   1.0
package provide curly   1.0
package provide moe     1.0


# Utilities:

proc clearInitializationLists {} {
    set InitializeConfiguration::packageList ""
    set InitializeConfiguration::configurationFiles ""
}

#  Subsystem add.

tcltest::test InitializeConfiguration-1.0 {InitializeConfiguration::addSubsystem 1} {
    clearInitializationLists

    InitializeConfiguration::addSubsystem testing

    set InitializeConfiguration::packageList
} testing

tcltest::test InitializeConfiguration-1.1 {InitializeConfiguration::addSubsystem list of them} {
    clearInitializationLists


    InitializeConfiguration::addSubsystem testing
    InitializeConfiguration::addSubsystem larry
    InitializeConfiguration::addSubsystem curly
    InitializeConfiguration::addSubsystem moe

    set InitializeConfiguration::packageList
} [list testing larry curly moe]

tcltest::test InitializeConfiguration-1.2 {InitializeConfiguration::addSubsystem nonexistent package} {
    clearInitializationLists

    if {![catch {InitializeConfiguration::addSubsystem {does not exist}} msg]} {
        set msg "Nonexistent package worked"
    }
    set msg

} {InitializeConfiguration::NoSuchPackage}

#  Tests for addConfigFile:
#
tcltest::test InitializeConfiguration-2.0 {InitializeConfiguration::addConfigFile exists} {
    clearInitializationLists

    set file [::tcltest::makeFile {} configuration.file]
    InitializeConfiguration::addConfigFile $file
    ::tcltest::removeFile $file

    if {$file == $InitializeConfiguration::configurationFiles} {
        set result 1
    } else {
        set result 0
    }

} 1

tcltest::test InitializeConfiguration-2.1 {InitializeConfiguration::addConfigFile does not exist} {
    clearInitializationLists

    if {![catch {InitializeConfiguration::addConfigFile nosuchfile.anywhere} msg]} {
        set msg "Nonexistent file worked!"
    }
    set msg
} {InitializeConfiguration::FileNotFound}

tcltest::test InitializeConfiguration-2.2 {
    InitializeConfiguration::addconfigFile protected file} {
        macOrUnix} {
    clearInitializationLists

    set file [::tcltest::makeFile {} {configuration.file}]
    file attributes $file  -permission 0200;     # Writeable only..

    if {![catch {InitializeConfiguration::addConfigFile $file} msg]} {
        set msg {Unreadable worked}
    }
    ::tcltest::removeFile $file

    set msg

} {InitializeConfiguration::FileNotReadable}




#  Now be sure initialization really works.

namespace eval testing {
}
proc testing::setDefaults {} {
    Configuration::Set testingDefaults done
}
proc testing::environmentOverrides {} {
    Configuration::Set testingEnv   done
}

tcltest::test InitializeConfiguration-3.0 {InitializeConfiguration::initialize} {
    clearInitializationLists

    InitializeConfiguration::addSubsystem testing
    set file [::tcltest::makeFile {set testingFile done} config.file]
    InitializeConfiguration::addConfigFile $file

    InitializeConfiguration::initialize
    ::tcltest::removeFile $file


    foreach var {testingDefaults testingEnv testingFile} {
        lappend valuelist [Configuration::get $var]
    }
    set valuelist
} {done done done}


namespace delete testing


set auto_path $autopsaved
file delete pkgIndex.tcl
if {[file exists pkgIndex.tcl.saved]} {
    file rename pkgIndex.tcl.saved pkgIndex.tcl
}
package forget testing
package forget larry
package forget curly
package forget moe
