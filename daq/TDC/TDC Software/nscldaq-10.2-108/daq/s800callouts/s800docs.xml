<!-- chapter libraries -->
<chapter>
    <title>S800 ReadoutCallouts</title>
    <para>
        The S800 data acquisition system uses a data taking framework that
        requires special handling.  This chapter describes the S800
        data acquisition system.  We also describe the sorts of things
        that need to be done to integrate the S800 with NSCLDAQ and finally
        provide a brief description of what you need to do to use the S800
        DAQ system.
    </para>
    <section>
        <title>S800 Data acquisition system</title>
        <para>
            The S800 system consists of a CAMAC crate that is read via a CC-USB
            FPGA based crate controller and a VME crate that is read via
            a VM-USB FPGA based controller.  The CAMAC crate contains electronics
            that read much of the focal plane while the VME crate contains
            electronics that read out the CRDC's and image 2 detectors when they
            are in use.
        </para>
        <para>
            The CC-USB and VM-USB are both block mode readout engines in the sense
            that each module provides data from several triggers as the result
            of each transfer to the host.  This means that the data from the
            CC-USB and VM-USB must be built into events by an event builder.
        </para>
        <para>
            The S800 event builder creates events and re-formats them so that
            they meet the event formats described in the Operations Technical Development
            group at
            <ulink url='https://groups.nscl.msu.edu/opdevtech/wiki'>
                https://groups.nscl.msu.edu/opdevtech/wiki</ulink>.
            The event builder
            is also able to serve data to TCP/IP clients both remote and local
            to the system in which it runs.  Data are delivered in 8Kbyte buffers
            to clients that connect on port 9002.  These buffers are formatted
            with a header that matches the pre-ring buffer data acquisition system
            format.
        </para>
        <para>
            The entire system is run by a GUI that is tightly integrated into the
            readout framework (is part of the readout program in fact).  The
            readout program, however can accept exactly one client on port 8000.
            The protocol is described at the same wiki.
        </para>
    </section>
    <section>
        <title>Scope of the integration problem.</title>
        <para>
            The following issues must be dealt with to run the s800 from
            the NSCLDAQ Readout GUI and accept data from it in the
            <emphasis>normal</emphasis> way.
        </para>
        <itemizedlist>
            <listitem>
                <para>The Readout GUI must be given a dummy readout program
                    since the s800 is not built to be run from the GUI.
                </para>
            </listitem>
            <listitem>
                <para>The Readout GUI must relay operations to the S800's
                 readout program over TCP/IP.
                </para>
            </listitem>
            <listitem>
                <para>
                    Data must be taken from the S800 event builder, turned into
                    ring items and put in a ring.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            With the exception of the first of these items, a readout callouts
            package can supply the needed operations.  The need for a readout program
            is satisfied by a program installed in NSCLDAQ since version 10.1
            called <literal>dummyrdo</literal>.    It does not really matter
             where this program runs as all it does is take any commands sent to
             its stdin and throw them away.
        </para>
        <para>
            The remainder of the interfacing is performed by a Tcl package
            that can be included and integrated with a <filename>ReadoutCallouts.tcl</filename>
            script.
            This is described completely in the <link linkend="s800Readoutcallouts">
            reference/manpage on the package</link>.  The next section provides
            an example that shows how to use this package.
        </para>
    </section>
    <section>
        <title>Using the S800 integration package</title>
        <para>
            To use the S800 integration package you must
        </para>
        <itemizedlist>
            <listitem>
                <para>Include the NSCLDAQ 10.1 or later <filename>TclLibs</filename>
                directory in your Tcl package load path (<varname>auto_path</varname>).
                </para>
            </listitem>
            <listitem>
                <para>Use <command>package require s800</command> to load
                the s800 package.
                </para>
            </listitem>
            <listitem>
                <para>Initialize the package and invoke its commands
                from the appropriate parts of your <filename>ReadoutCallouts.tcl</filename>
                script (creating a new one  if needed).  The
                <link linkend="manpage_readoutshell"> reference material on
                the ReadoutGUI</link> describes <filename>ReadoutCallouts.tcl</filename>
                scripts more fully.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            The following is a minimal example:
        </para>
        <example>
            <title>A ReadoutCallouts.tcl for the s800</title>
            <programlisting>
lappend auto_path /usr/opt/daq/10.1/TclLibs <co id="s800_autopath" />
package require s800

s800::Initialize spdaq48                   <co id="s800_init" />
proc OnBegin run {
    s800::OnBegin                          <co id="s800_onbegin" />
}
proc OnEnd run {
    s800::OnEnd                            <co id="s800_onend" />
}

            </programlisting>
        </example>
        <calloutlist>
            <callout arearefs="s800_autopath">
                <para>
                    This line adds the Tcl library directory for
                    nscldaq 10.1 (as installed at the NSCL) to the
                    Tcl package search path.  The next line loads the
                    <literal>s800</literal> package and its commands.
                </para>
            </callout>
            <callout arearefs="s800_init" >
                <para>
                    Initializes the S800 package.  In this case,
                    <literal>spdaq48</literal> is the host on which
                    the S800 readout program must already be running.
                    One side effect of this is to form a connection with the
                    S800 readout program and set its GUI into slave mode.
                </para>
            </callout>
            <callout arearefs="s800_onbegin" >
                <para>
                    The <function>OnBegin</function> proc in
                    <filename>ReadoutCallouts.tcl</filename> is ivoked
                    as the run is beginning.  The
                    <function>s800::Onbegin</function> function
                    sets up, if needed, the necessary bits and pieces
                    of software needed to get data from the S800 event builder
                    and insert it into the ring (by default named
                    <literal>s800</literal>).  It then requests the the
                    s800 Readout program start taking data.
                </para>
            </callout>
            <callout arearefs='s800_onend'>
                <para>
                    Similarly, the call to <function>s800::OnEnd</function>
                    asks the S800 readout software to end the run as a result
                    of a click on the <guibutton>End</guibutton> button.
                </para>
            </callout>
        </calloutlist>

    </section>
</chapter>

<!-- /chapter -->
<!-- manpage 3tcl -->
      <refentry id="s800Readoutcallouts">
        <refmeta>
           <refentrytitle>s800</refentrytitle>
           <manvolnum>3tcl</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>s800</refname>
           <refpurpose>s800 Readout Callouts module</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
          <command>
package require s800

          </command>
          <command>
s800::Initialize ?host? ?port?
          </command>
          <command>
s800::OnBegin
          </command>
          <command>
s800::OnEnd            
          </command>
          </cmdsynopsis>
          <cmdsynopsis>
            <command>
$DAQHOME/bin/ReadoutShell -host=localhost -path=$DAQHOME/bin/dummyrdo -nomonitor
            </command>
          </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            <filename>ReadoutCallouts.tcl</filename> package that allows
            ReadoutGUI to control the S800 readout software, get data from the
            s800 event builder and insert it into NSCLDAQ rings.
           </para>
           <para>
            See COMMANDS below for a description of each command and where it should be used.
            See EXAMPLES below as well for a sample <filename>ReadoutCallouts.tcl</filename>
            file.  The final entry in the SYNOPSIS section above describes how to
            invoke the ReadoutGUI in the context of an S800 experiment.
           </para>
        </refsect1>
        <refsect1>
           <title>
              COMMANDS
           </title>
           <variablelist>
            <varlistentry>
                <term><command>s800::Initialize</command> <replaceable>?host? ?port?</replaceable></term>
                <listitem>
                    <para>
                        Initializes the s800 package.  This involves setting
                        up a connection to the S800 Readout program, adding a
                        status line to the ReadoutGUI that shows the
                        status of its readout GUI.  It also removes the
                        <guibutton>Pause/Resume</guibutton> button as the
                        S800 readout program does not support pausing runs.
                    </para>
                    <para>
                        Exit handlers are also created to ensure that everthing
                        gets cleaned up on most exits.
                    </para>
                    <para>
                        The optional <parameter>host</parameter> and
                        <parameter>port</parameter> parameters are the host on
                        which the s800 readout program is running and the port
                        on which it is listening for a control connection.  These
                        have the correct default values.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command>s800::OnBegin</command></term>
                <listitem>
                    <para>
                        Should be called from your <function>OnBegin</function>
                        proc in your <filename>ReadoutCallouts.tcl</filename>
                        file.  This does what's needed to start the S800
                        readout program taking data.  If necessary, the pipeline
                        that takes data from the S800 eventbuilder and inserts
                        those data into an NSCLDAQ ring is started.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command>s800:OnEnd</command></term>
                <listitem>
                    <para>
                        Should be called from your <function>OnBegin</function>
                        function to end the run in the S800.
                    </para>
                </listitem>
            </varlistentry>
            
            
           </variablelist>
        </refsect1>
        <refsect1>
           <title>ENVIRONMENT VARIABLES</title>
           <para>
              The following environment variables can modify where the s800
              readout callouts looks for stuff:
           </para>
           <variablelist>
              <varlistentry>
                 <term><literal>S800_HOST</literal></term>
                 <listitem><para>
                     If defined overrides the default host in which the S800
                     is running.  The default host is
                     <literal>spdaq48</literal>.  You should only need to
                     modify this value if the S800 spdaq system needs
                     to be replaced in an emergency.
                  </para></listitem>
               </varlistentry>
               <varlistentry>
                    <term><literal>S800_PORT</literal></term>
                    <listitem><para>
                       Overrides the default port on which the S800 is
                       listening for data connections.  The command port must
                       and host must be provided when initializing the
                       callouts package.  If not defined, this defaults to 
                       <literal>9002</literal> which is the normal port.
                    </para></listitem>
                </varlistentry>
                <varlistentry>
                     <term><literal>S800_RING</literal></term>
                     <listitem><para>
                          The name of the ring into which the s800 data are
                          put.  This defaults to
                          <literal>s800_`whoami`</literal> where  
                          <literal>`whoami`</literal> is your logged in 
                          username.
                     </para></listitem>
                 </varlistentry>
             </variablelist>
        </refsect1>
        <refsect1>
            <title>EXAMPLES</title>
            <para>
                Here is a minimal ReadoutCallouts example.
            </para>
            <informalexample>
                <programlisting>
lappend auto_path /usr/opt/daq/10.1/TclLibs 
package require s800

s800::Initialize spdaq48
proc OnBegin run {
    s800::OnBegin       
}
proc OnEnd run {
    s800::OnEnd         
}
                    
                </programlisting>
            </informalexample>
        </refsect1>
        <refsect1>
            <title>KNOWN ISSUES</title>
            <itemizedlist>
                <listitem><para>The operator of the S800 readout GUI can steal
                    control away from the NSCLDAQ ReadoutGUI.
                    </para></listitem>
                <listitem><para>Sufficiently hard exits can cause the software
                    to leave lingering processes.
                    </para></listitem>
                <listitem><para>No timeouts are done when communicating with the
                    s800 which can lead to deaclocks.
                    </para></listitem>
            </itemizedlist>
        </refsect1>
                    
      </refentry>

<!-- /manpage -->