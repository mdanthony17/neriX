<!-- chapter frameworks -->
<chapter>
    <title>Event builder Readout Callouts</title>
    <para>
        Event builder readout callouts allow you to integrate the event builder
        with the Readout GUI.   There are two layers of callouts;
        <itemizedlist>
            <listitem>
                <para>
                    An API layer provides the highest level of flexbility by
                    providing you witha set of Tcl procs you can use from inside
                    your ReadoutCallouts Extensions to manage the event builder
                    and its pipeline.
                </para>
            </listitem>
            <listitem>
                <para>
                    An EZBuilder layer provides a set of simple calls you can
                    make that handle the most common use cases for the event builder.
                </para>
            </listitem>
        </itemizedlist>
    </para>
    <para>
        Both the API and EZBuilder procs are part of the Tcl package
        <literal>evbcallouts</literal>
    </para>
    <section>
        <title>API layer</title>
        <para>
            The API layer of the readout callouts library provides low level
            calls that let you start and stop the event builder as well as to
            reset its timestamp knowledge.
        </para>
        <para>
            Procedures have also been provided to help you start standard
            event sources.  Specifically <function>startRingSource</function>
            starts a ring buffer data source while <function>startS800Source</function>
            starts the S800 data source.
        </para>
        <para>
            Reference information for the API layer is provided in the
            3evb manpage section.
        </para>
    </section>
    <section>
        <title>EZBuilder</title>
        <para>
            The EZBuilder procs provide directly usable functionality for
            initializing the package, starting a run and ending a run.
            Use of the EZBuilder API is significantly simpler that direct use of
            the API layer, and is recommended.
        </para>
        <para>
            See the 3evb manpage section for EZBuilder information as well.
        </para>
    </section>

</chapter>
<!-- manpage 3evb -->

<preface>
    <title>Preface</title>
    <para>
        The pages below consist of the API layer.
    </para>
</preface>
<!--  Event builder API layer. -->
      <refentry id="evb3_start">
        <refmeta>
           <refentrytitle id="evb3_start_title">EVBC::start</refentrytitle>
           <manvolnum>3evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVBC::start</refname>
           <refpurpose>Start the event builder pipeline.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
EVBC::start <replaceable>options</replaceable>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            <command>EVBC::start</command> starts the event builder pipeline.
            It is an error to start the pipeline if it is already started.
            The <replaceable>options</replaceable> described in the command
            synopsis above are option value pairs which are described in the
            <literal>OPTIONS</literal> section below.
           </para>
           <para>
            This proc is part of the API layer.  Rather than using it directly,
            you may want to consider using the procs in the EZBuilder layer.
           </para>
        </refsect1>
        <refsect1>
           <title>
              OPTIONS
           </title>
           <variablelist>
            <varlistentry>
                <term><option>-teering</option> <replaceable>ringname</replaceable></term>
                <listitem>
                    <para>
                        If present with a non empty value, this option inserts
                        an element in the pipeline that tees off the ordered
                        fragments into a ring buffer.  The value of this option
                        is the name of the ring (not the URL) which will receive
                        the ordered fragments.
                    </para>
                    <para>
                        Defaults to an empty string which disables the production
                        of an intermediate data ring.
                    </para> 
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>-glombuild</option> <replaceable>yes | no</replaceable></term>
                <listitem>
                    <para>
                        If <literal>yes</literal> the glom stage of the pipline
                        builds events using a coincidence interval specified
                        by the <option>-glomdt</option> option.
                    </para>
                    <para>
                        If <literal>no</literal> the glom stage only passes
                        fragments on with minimal re-formatting to turn them into
                        proper event ring items.
                    </para>
                    <para>
                        Defaults to no
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>-glomdt</option> <replaceable>ticks</replaceable></term>
                <listitem>
                    <para>
                        If <option>-glombuild</option> is yes, this sets the
                        number of timestamp clock ticks that define a coincidence
                        interval for event building.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>-destring</option> <replaceable>ringname</replaceable></term>
                <listitem>
                    <para>
                        Specifies the ring in which the output of <literal>glom</literal>
                        is put.  If not provided, this default to the username
                        of the logged in account.
                    </para>
                </listitem>
            </varlistentry>
           </variablelist>
        </refsect1>
        <refsect1>
            <title>EXAMPLES</title>
            <para>
                The example below starts up the event building pipline without
                merging the data into events.  The output ring is named
                <literal>built</literal>
            </para>
            <informalexample>
                <programlisting>
EVBC::start -glombuild off -destring built
                </programlisting>
            </informalexample>
            <para>
                The example below starts up the event building pipeline merging
                the data from adjacent fragments into event when the difference
                timestamp is less than <literal>300</literal>.
                Output data is put in the ring <literal>built</literal>, the orderered
                fragments are put in the ring <literal>fragments</literal>
            </para>
            <informalexample>
                <programlisting>
EVBC::start -glombuild on -glomdt 300 -destring built -teering fragments
                </programlisting>
            </informalexample>
        </refsect1>
      </refentry>
      <refentry id="evb3_stop">
        <refmeta>
           <refentrytitle id="evb3_stop_title">EVBC::stop</refentrytitle>
           <manvolnum>3evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVBC::stop</refname>
           <refpurpose>Stop the event builder pipeline.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
EVBC::stop
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            Requests that the running event builder pipeline shut down.
            Note that the actual shutdown can take some time.  It is an error
            to call this when no event builder pipeline is running.
           </para>
        </refsect1>

      </refentry>
      <refentry id="evb3_reset">
        <refmeta>
           <refentrytitle id="evb3_resetcmd">EVBC::reset</refentrytitle>
           <manvolnum>3evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVB::reset</refname>
           <refpurpose>Reset timestamp history</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
EVB::reset
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            The event builder maintains an idea of what the oldest timestamp is.
            This allows it to detect and complain about data which received
            late, and will therefore be emitted out of order, as well as to
            provide that information to the statistics displays.
           </para>
           <para>
            It is strongly recommended that this only be called when the event
            builder has become quiescent.  That is after the run has ended.
           </para>
        </refsect1>
      </refentry>
      <refentry id="evb3_flush">
        <refmeta>
           <refentrytitle id="evb3_flush_title">EVBC::flush</refentrytitle>
           <manvolnum>evb3</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVBC::flush</refname>
           <refpurpose>Flush event builder event queues.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
EBC::flush
              </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            Requests that the event builder order data until all of its input
            queues are empty.  This should not be done unless you know that
            the event builder  is not likely to receive any new data for a while
            (e.g. run has halted).  The actual flush is performed asynchronously
            and may require some time to perform depending on how backed up the
            input queues are.
           </para>
        </refsect1>

      </refentry>

      <refentry id="evb3_startringsource">
        <refmeta>
           <refentrytitle id='evb3_startringsource_title'>EVBC::startRingSource</refentrytitle>
           <manvolnum>3evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVBC::startRingSource</refname>
           <refpurpose>Start a ring fragment source for the event builder.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
EVBC::startRingSource <replaceable>source-uri extractor-lib source-id info</replaceable>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            Starts a fragment source that gets is data from a ring buffer.  For
            more on ring fragment sources see:
            <link linkend='sec_ringfragsrc' endterm='sec_ringfragsrc_title' />
            elsewhere in the documentation.  That discussion will provide more
            information about the meaning of the parameters on the command line.
           </para>
           <para>
            Note that the fragment source requires the event builder pipeline be
            up and running.  If the event builder pipeline exits, the fragment source
            will too as soon as it is required to send data to the event builder.
           </para>
           <para>
            See <literal>PARAMETERS</literal> below for a brief explanation of
            the command line parameters, as well as the reference cited above.
           </para>
        </refsect1>
        <refsect1>
           <title>
              PARAMETERS
           </title>
            <variablelist>
                <varlistentry>
                    <term><replaceable>source-uri</replaceable></term>
                    <listitem>
                        <para>
                            The URI of the ring buffer from which the data
                            will be taken.  If the ring is local to the
                            system that ReadoutGUI is running in, you should
                            specify <filename>tcp://localhost/ring-name</filename>
                            where <replaceable>ring-name</replaceable> is the name
                            of the ring buffer.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><replaceable>extractor-lib</replaceable></term>
                    <listitem>
                        <para>
                            Specifies the file system path to the shared object
                            that contains code that can extract  the timestamp
                            from the incoming ring data.
                            <link linkend='sec_tsextractors' endterm='sec_tsextractors_title' />
                            describes how to write timestamp extractors and how
                            to build them in to shared libraries.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><replaceable>source-id</replaceable></term>
                    <listitem>
                        <para>
                            The source id to be associated with the ring buffer.
                            Data flowing to an event builder is placed in several
                            input queues.  The input queue selected is described by
                            the <firstterm>source Id</firstterm> which is an integer.
                        </para>
                        <para>
                            The data from a specific source Id need not all come from
                            the same client, but it must be received by the event
                            builder in strict time order.  Data from a specific
                            ring is assumed to constitute data from a single
                            event source.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><replaceable>info</replaceable></term>
                    <listitem>
                        <para>
                            This parameter is arbitrary text that is used to
                            label the data source client in the event builder
                            GUI connection list window.  It is intended to allow
                            humans to better understand what each source
                            represents.  It is not used by the event builder
                            itself other than to label sources.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect1>

      </refentry>
      <refentry id="evb3_starts800source">
        <refmeta>
           <refentrytitle id='evb3_starts800source_title'>EVBC::startS800Source</refentrytitle>
           <manvolnum>3evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVBC::startS800Source</refname>
           <refpurpose>Start S800 data source</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
            <command>
EVBC::startS800Source <replaceable>ring-uri source-id ?info?</replaceable>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            This is actually a wrapper for a call to
            <command>EVBC::startRingSource</command> using a timestamp
            extractor built for S800 data.  The parameters have the same
            meaning as for <command>EVBC::startRingSource</command>.  If the
            <parameter>info</parameter> parameters is not supplied it defaults
            to <literal>S800 USB data</literal>.
           </para>
        </refsect1>

      </refentry>

<!-- Event builder EZBuilder layer. -->
<preface>
    <title>Preface</title>
    <para>
        The pages below provide reference material for the EZBuilder
        layer of software.  Conceptually, this layer provides a single
        initialization proc (called from <command>OnStart</command>),
        a proc to call from <command>OnBegin</command> and another proc to call
        from <command>OnEnd</command>.
    </para>
</preface>

      <refentry id="evb3_initialize">
        <refmeta>
           <refentrytitle id='evb3_initiailze_title'>EVBC::initialize</refentrytitle>
           <manvolnum>3evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVBC::initialize</refname>
           <refpurpose>Initialize the EZBuilder layer.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
            <command>
EVBC::initialize <replaceable>options</replaceable>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            Intended to be called from your <command>OnStart</command> proc.
            This initializes the EZBuilder and controls how it will behave.
            The parameters to this command are option value pairs.
            See <literal>EXAMPLES</literal> below for some typical option
            sets.
           </para>
           <para>
            For information about the specific options, see
            <literal>OPTIONS</literal> below and
            <link linkend='evb3_start' endterm='evb3_start_title' />.
           </para>
        </refsect1>
        <refsect1>
           <title>
              OPTIONS
           </title>
           <para>
            The <command>EVBC::initialize</command> command accepts all options
            that the <link endterm='evb3_start_title' linkend='evb3_start' />
            understands as  well as the following additional options:
           </para>
            <variablelist>
                <varlistentry>
                    <term><option>-gui</option> <replaceable>on | off</replaceable></term>
                    <listitem>
                        <para>
                            If <option>-gui</option> is
                            <literal>true</literal>, EZBuilder will
                            add a control strip to the bottom of the ReadoutGUI
                            control panel. This control strip will give you
                            dynamic control over the options controlled by
                            <command>EVBC::initialize</command>.
                        </para>
                        <para>
                            Only do this if you trust your users to be able to
                            set sensible values in this user interface.  If you
                            don't you will sleep better at night choosing the
                            options you want and disabling the GUI strip.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-restart</option> <replaceable>yes | no</replaceable></term>
                    <listitem>
                        <para>
                            If <option>-restart</option> is <literal>yes</literal>,
                            the event builder pipeline is restarted at the beginning
                            of each run (See <link linkend='evb3_onbegin' endterm='evb3_onbegin_title' />).
                            Otherwise, the event builder timstamp memory is just
                            reset at the beginning of each run and the
                            event builder pipline is only started at the beginning
                            of the first run.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect1>
        <refsect1>
            <title>EXAMPLES</title>
            <para>
                The example below does not allow event builder parameters
                to be modified between runs.  It requests a new instance of the
                event builder for each run.  Note that this implies that the
                begin run will invoke <command>startEVBSources</command> if
                that command/proc has been defined.  That allows you to start
                fragment sources after the event builder pipeline has been
                started.
            </para>
            <informalexample>
                <programlisting>
EVBC::initialize -glombuild yes -glomdt 200 -destring built -restart yes -gui off
                </programlisting>
            </informalexample>
            <para>
                The exmple below initially requests a restart before each run but,
                since the GUI is enabled, this can be modified by the user.
            </para>
            <informalexample>
                <programlisting>
EVBC::initialize -glombuild yes -glomdt 200 -destrign built -restart yes -gui on
                </programlisting>
            </informalexample>
            
        </refsect1>
      </refentry>
      <refentry id="evb3_onbegin">
        <refmeta>
           <refentrytitle id='evb3_onbegin_title'>EVBC::onBegin</refentrytitle>
           <manvolnum>3evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVBC::onBegin</refname>
           <refpurpose>EZBuilder begin run actions</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
EVBC::onBegin
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            Call <command>EVBC::onBegin</command> from your <command>OnBegin</command>
            callout.  If <option>-restart</option> is on, a new instance of the event
            builder will be started (and the old one killed off).  If the Event
            builder is being started, if you have defined a proc or command named
            <literal>startEVBSources</literal> that will be invoked
            after the event builder pipeline has been started.
           </para>
           <para>
            If the event builder pipeline is not restarted, this command will
            also call <command>EVBC::reset</command> preparing the event builder
            for the potential that the timestamps in the data acquisition
            hosts have been reset.
           </para>
        </refsect1>

      </refentry>
      <refentry id="evb3_onend">
        <refmeta>
           <refentrytitle id='evb3_onend_title'>EVBC::onEnd</refentrytitle>
           <manvolnum>3evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVBC::onEnd</refname>
           <refpurpose>EZBuilder end run actions.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            Invoked at the end of the run from your <command>OnEnd</command>
            proc.  This initiates a flush of the events queued.
           </para>
        </refsect1>

      </refentry>



<!-- /manpage     -->
<!-- manpage 1daq -->
      <refentry id="daq1-evbclientfw-run">
        <refmeta>
           <refentrytitle id="daq1-evbclientfw-run-title">Event builder client framework</refentrytitle>
           <manvolnum>1daq</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>Event builder client framework</refname>
           <refpurpose>Event builder cilent framework</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>    
          <command>
<replaceable>binary-name options...</replaceable>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            The end result of user code build on top of the event builder
            clienty framework is a runnable program.  The program uses
            a .ggo file to define the set of options it supports.
            Several options are defined for use by the framework, others
            shared between the framework and your application code, while
            you may add other options to the skeleton .ggo files for
            purely application specific purposes.
           </para>
        </refsect1>
        <refsect1>
           <title>
              OPTIONS
           </title>
           <para>
            The options described here are those that are defined in the
            skeleton .ggo file.
           </para>
           <variablelist>
       <varlistentry>
                    <term><option>--evbhost</option>=<replaceable>hostname</replaceable></term>
                    <listitem>
                        <para>
                            Provides the name of the host on which the event
                            orderer/event builder is running.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--evbport</option>=<replaceable>port-spec</replaceable></term>
                    <listitem>
                        <para>
                            Provides a specification of the port number on which
                            the event orderer is listening for connections.
                            If <literal>managed</literal> is used, the
                            software will attempt to locate the server's
                            port using the remote system's port manager.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--info</option>=<replaceable>information string</replaceable></term>
                    <listitem>
                        <para>
                            When connecting to the event builder/orderer,
                            this string is used to describe the connection.
                            It is available to GUI software that has been
                            incorporated in the event orderer.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--ids</option>=<replaceable>id-list</replaceable></term>
                    <listitem>
                        <para>
                            Normally this is a comma separated list of the
                            event source ids that are managed by this
                            data source.  Ring buffers comprise only a single
                            event source and the program quits with an error
                            if more than one event source id is supplied.
                        </para>
                        <para>
                            The event source id tags each fragment submitted
                            to the event builder. This allows data consumers
                            to know which fragment came from which data source.
                        </para>
                    </listitem>
                </varlistentry>
          

           </variablelist>
        </refsect1>

      </refentry>

<!-- /manpage -->
<!-- manpage 1evb -->
      <refentry id='evb1_handleFragment'>
        <refmeta>
           <refentrytitle id='evb1_handleFragment_title'>EVB::handleFragment</refentrytitle>
           <manvolnum>1evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVB::handleFragment</refname>
           <refpurpose>Submit event fragments.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
          <command>
EVB::handleFragments <replaceable>file-descriptor</replaceable>           
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            The event builder orderer stage core is a loadable Tcl packge.
            Non time-critical functions, such as connection management are
            handled by Tcl scripts while time critical operations are compiled
            C code with Tcl command interfaces.
           </para>
           <para>
            The <command>EVB::handleFragments</command> indicates that a
            file descriptor (usually a socket) has event fragments available.
            The command will read an <literal>FRAGMENTS</literal> flattened fragments
            body from the file descriptor and submit those as event fragments
            to the event orderer core.
           </para>
           <para>
            The format of the data expected on that file descriptor is described
            in <link linkend="daq5-evbprotocol" endterm='daq5-evbprotocol-title' />.
           </para>
        </refsect1>

      </refentry>
      <refentry id="evb1_inputStats">
        <refmeta>
           <refentrytitle id='evb1_inputStats_title'>EVB::inputStats</refentrytitle>
           <manvolnum>1evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVB::inputStats</refname>
           <refpurpose>Event builder input statistics</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
            <command>
EVB::inputStats get

            </command>
          </cmdsynopsis>
            <cmdsynopsis>
                <command>
EVB::inputStats clear
                </command>
            </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            The <command>get</command> subcommand
            retrieves statistics about the input fragments the event builder has
            seen.  The intent is that this could be periodically refreshed
            to drive a status display written in in Tk.  The
            <command>clear</command> command clears the counters that maintain
            those statistics.
           </para>
           <para>
            This command returns a list that contains the following members (in
            order):
           </para>
           <variablelist>
            <varlistentry>
                <term>oldestTimestamp</term>
                <listitem>
                    <para>
                        The timestamp of the oldest fragment still in the
                        queues.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>newestTimestamp</term>
                <listitem>
                    <para>
                        The largest timestamp that has been seen.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>totalFragCount</term>
                <listitem>
                    <para>
                        The total number of fragments that have been
                        submitted for ordering.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>queueStatistics</term>
                <listitem>
                    <para>
                        Detailed statistics for each input queue.  For each
                        live data sourcde, this element will itself be a list
                        that contains the following elements:
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term>id</term>
                            <listitem>
                                <para>
                                    The source Id of a data source. This determines
                                    which source's statistics are contained by this
                                    list element.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>depth</term>
                            <listitem>
                                <para>
                                    The number of queued fragments.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>oldest</term>
                            <listitem>
                                <para>
                                    The timestamp of the element at the front
                                    of the input queue.
                                </para>
                            </listitem>
                        </varlistentry>
                        
                    </variablelist>
                </listitem>
            </varlistentry>
            
           </variablelist>
        </refsect1>

      </refentry>
      <refentry id="evb1_outputstats">
        <refmeta>
           <refentrytitle id='evb1_outputstats_title'>EVB::outputStats</refentrytitle>
           <manvolnum>1tcl</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVB::outputStats</refname>
           <refpurpose>Get orderer output statistics</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
            <command>
EVB::outputStatistics get

            </command>
          </cmdsynopsis>
            <cmdsynopsis>
                <command>
EBB::outputStatistics clear
                </command>
            </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            The <command>get</command> subcommand
            eturns information about the ordered event fragments that have
            been created and output by the event orderer. The <command>clear</command>
            subcommand clears those statistics.
           </para>
           <para>
            The <command>get</command> subcommand returns statistics as a list.
            The first element of the list is the total number of output fragments
            emitted by the program.  Subsequent list elements are pairs where the
            first element of the pair is a source id and the second element the
            number of fragments emitted from that source.
           </para>
        </refsect1>

      </refentry>
      <refentry id="evb1_dlatestats">
        <refmeta>
            <refentrytitle id='evb1_dlatestats_title'>EVB::dlatestats</refentrytitle>
           <manvolnum>1evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname >EVB::dlatestats</refname>
           <refpurpose>Get the late fragment statistics.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
EVB::dlatestats
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            Returns statistics about data late fragments.  A fragment is late if,
            due to the event ordering accumulation window, it must be emitted
            out of order.  Specifically, if the timestamp of a fragment is earlier
            than the the timestamp of the fragment most recently sent to the
            output stage, the fragment is late.
           </para>
           <para>
            The command takes no additional command parameters and returns
            a list consisting of the following elements:
           </para>
            <itemizedlist>
                <listitem>
                    <para>
                        The number of fragments that have been received late.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The worst time difference between a late fragment and
                        the most recently output fragment.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        A list for each data source that contains
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>The source id</para>
                        </listitem>
                        <listitem>
                            <para>The number of late fragments from that source</para>
                        </listitem>
                        <listitem>
                            <para>The worst case time difference from that source</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </refsect1>

      </refentry>
      <refentry id="evb1_ondatalate">
        <refmeta>
           <refentrytitle id='evb1_ondatalate_title'>EVB::onDataLate</refentrytitle>
           <manvolnum>1evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVB::onDataLate</refname>
           <refpurpose>Bind scripts to data late events.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
            <command>
EVB::onDataLate <replaceable>script</replaceable>
            </command>
          </cmdsynopsis>
            <cmdsynopsis>
                  <command>
EVB::onDataLate
                  </command>
              </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            The first form of this command establishes a <parameter>script</parameter>
            to be invoked when a data late fragment is received.  The script
            has appended to it the <parameter>source id</parameter> of the
            data source that contributed the fragment, the
            <parameter>timestamp</parameter> of the late fragment, and
            the <parameter>newest</parameter> timestamp emitted.
           </para>
           <para>
            If the <parameter>script</parameter> is an empty string, the current
            script will no longer receive these events.  If there is no prior
            script this is a no-op.
           </para>
           <para>
            The second form of the command does nothing.
           </para>
           <para>
            Both forms return the script associated with these events prior to the
            command execution.  If no script was associated with this event,
            both forms return an empty strig.
           </para>
        </refsect1>
      </refentry>

      <refentry id="evb1_barriertrace">
        <refmeta>
           <refentrytitle id='evb1_barriertrace_title'>EVB::barriertrace</refentrytitle>
           <manvolnum>1evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVB::barriertrace</refname>
           <refpurpose>Supply a script to invoke on barrier events.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
          <command>
EVB::barriertrace complete ?<replaceable>script</replaceable>?
          </command>
          </cmdsynopsis>
            <cmdsynopsis>
                <command>
EVB::barriertrace incomplete ?<replaceable>script</replaceable>?
                </command>
            </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            The first form of this command places, deletes or lists the script
            that is associated with properly formed barrier events.
            If a script is not supplied, the current script is returned.  If there
            is no current script an emtpy string is returned.
            If a script is supplied it replaces the current complete barrier
            script. If an empty string is supplied for the new script, no script
            will be called for future complete barriers.
           </para>
           <para>
            Complete barrier scripts have appended to them a list of pairs. Each
            pair contains the source Id of a barrier contributor and the
            type of barrier event emitted by that source.
           </para>
           <para>
            The second form of this command performs the same function for
            incomplete barriers.  An incomplete barrier is one for which barrier
            fragments have not been received from all sources within a timeout
            period.
           </para>
           <para>
            Incomplete barrier scripts receives two additional parameters. The
            first additional parameter is identical to the parameter
            passed to complete barrier scripts.  The second additional parameter
            is a list of data source ids that did not emit a barrier fragment
            prior to the barrier timeout.
           </para>
        </refsect1>

      </refentry>
      <refentry id="evb1_source">
        <refmeta>
           <refentrytitle id='evb1_source_title'>EVB::source</refentrytitle>
           <manvolnum>1evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVB::source</refname>
           <refpurpose>Create event source queues.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
            <command>
EVB::source ?<replaceable>socket id1...</replaceable>?
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            Creates a set of data source queues associated with a Tcl channel
            name (typically  a return value from <command>socket</command>).
            If no parameters are given the command returns  list of the
            known source ids.
           </para>
           <para>
            IF parameters are supplied on the command line there must be at
            least two. <parameter>socket</parameter> is the name of the channel
            that will be associated with the source queues.  <parameter>id1</parameter>
            is the first of potentially many source ids for which to create input
            queues.  Each source id is a separate parameter (not one parameter
            containing a list of source ids).
           </para>
        </refsect1>

      </refentry>
      <refentry id="evb1_deadsource">
        <refmeta>
           <refentrytitle id='evb1_deadsource1_title'>EVB::deadsource</refentrytitle>
           <manvolnum>1evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVB::deadsource</refname>
           <refpurpose>Mark a data source dead.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>

            <command>
EVB::deadsource <replaceable>id</replaceable>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            Marks the data source <parameter>id</parameter> dead.  From then on
            no fragments are expected from that source.  
           </para>
        </refsect1>
      </refentry>
      <refentry id="evb1_revivesocket">
        <refmeta>
           <refentrytitle id='evb1_revivesocket_title'>EVB::reviveSocket</refentrytitle>
           <manvolnum>1evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVB::reviveSocket</refname>
           <refpurpose>Revive all dead data sources associated with a socket</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
            <command>
EVB::reviveSocket <replaceable>sock-name</replaceable>                
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            All data sources associated with a socket that were marked as dead
            are marked as alive.  <parameter>sock-name</parameter> is the
            Tcl socket channel name to operate on.
           </para>
        </refsect1>

      </refentry>

      <refentry id="evb1_flush">
        <refmeta>
           <refentrytitle id='evb1_flush_title'>EVB::flush</refentrytitle>
           <manvolnum>1evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVB::flush</refname>
           <refpurpose>Empty all input queues.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
EVB::flush
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            The fragments in all input queues are flushed to output in timestamp
            order.  All observers on the output of fragments are invoked which
            ensures that output statistics are maintained and that the fragments
            make their way to the orderer's output stage.
           </para>
        </refsect1>

      </refentry>

      <refentry id="evb1_reset">
        <refmeta>
           <refentrytitle id='evb1_reset_title'>EVB::reset</refentrytitle>
           <manvolnum>1evb</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>EVB::reset</refname>
           <refpurpose>Reset timestamp clocks.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
          <command>
EVB::reset
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            Resets the event builder's timing information as if it had just been
            started.  If you are using the system with a system that resets
            timestamps back to near zero at the start of each data taking, you
            can use this to prevent an initial set of out of order packet errors.
           </para>
        </refsect1>

      </refentry>

<!-- /manpage -->