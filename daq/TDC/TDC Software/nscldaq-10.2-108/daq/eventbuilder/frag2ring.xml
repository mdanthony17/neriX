<!-- manpage 1daq -->


      <refentry id="daq1_frag2ring">
        <refmeta>
           <refentrytitle id="daq1_frag2ring_title">frag2ring</refentrytitle>
           <manvolnum>1daq</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>frag2ring</refname>
           <refpurpose>Filter flattened fragments to ring items.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
frag2ring <optional><replaceable>&lt; input-file</replaceable></optional>
    <optional><replaceable>&gt; output-file</replaceable></optional>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
                Filter that takes as input a stream of flattened event
                fragments and produces as output a set of <literal>EVB_FRAGMENT</literal>
                ring items.  This is intended to be in the middle of a pipeline
                that begins with the event orderer part of the event builder and
                ends with an instance of <command>stdintoring</command>.
                Used in that way it allows event fragments to be observed
                by monitoring programs prior to being sent to the event builder
                via a pipeline that begins with <command>ringtostdout</command>
                piped into <command>eventbuilder</command>.
           </para>
           <para>
                See INPUT FORMAT for more information about the shape
                of a flattened event segment, the required input.
                See <link linkend='ref-dataformat' endterm='ref-dataformat-title' />
                and the structure of <type>EventBuilderFragment</type> ring
                item.
           </para>
           <para>
                As a filter, the input stream comes from <literal>stdin</literal>
                and the output is directed to <literal>stdout</literal>.
                As previously mentioned, this allows the program to be used
                as an element of a unix pipeline of commands.
           </para>
        </refsect1>
        <refsect1>
            <title>INPUT FORMAT</title>
            <para>
                The input format recognized by this program is a
                <firstterm>flattened fragment</firstterm>.  This consists of
                a fragment header followed immediately by the fragment payload.
            </para>
            <para>
                The fragment header is defined by the data type
                <type>EVB::FragmentHeader</type> described in
                <filename>fragment.h</filename>.
                It looks like this:
            </para>
            <informalexample>
                <synopsis>
struct EVB::FragmentHeader {
    <fieldsynopsis><type>uint64_t</type> <varname>s_timestamp</varname></fieldsynopsis>
    <fieldsynopsis><type>uint32_t</type> <varname>s_sourceId</varname></fieldsynopsis>
    <fieldsynopsis><type>uint32_t</type> <varname>s_size</varname></fieldsynopsis>
    <fieldsynopsis><type>uint32_t</type> <varname>s_barrier</varname></fieldsynopsis>
};
                </synopsis>
            </informalexample>
            <para>
                Where the fields in this struture have the following meaning:
            </para>
            <variablelist>
                <varlistentry>
                    <term>
     <fieldsynopsis><type>uint64_t</type> <varname>s_timestamp</varname></fieldsynopsis>                       
                    </term>
                    <listitem>
                        <para>
                            The timestamp that indicates the creation time of
                            the fragment.
                        </para>
                    </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
    <fieldsynopsis><type>uint32_t</type> <varname>s_sourceId</varname></fieldsynopsis>                        
                        </term>
                        <listitem>
                            <para>
                                The id of the source of the data. 
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
<fieldsynopsis><type>uint32_t</type> <varname>s_size</varname></fieldsynopsis>
                        </term>
                        <listitem>
                            <para>
                                The number of bytes of payload data.  In a flattened
                                fragment the payload of the fragment immediately
                                follows this struct.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>
<fieldsynopsis><type>uint32_t</type> <varname>s_barrier</varname></fieldsynopsis>
                        </term>
                        <listitem>
                            <para>
                                If non-zero the fragment is an element of a
                                barrier.  Barrier fragments are  divisions in the
                                ordering process so that all elements of a
                                barrier received prior to timeout will be emitted
                                consecutively.  A barrier event is supposed to
                                provide contributions from all data sources.
                                Examples of barrier fragments are end of run
                                indications.
                            </para>
                        </listitem>
                    </varlistentry>
            </variablelist>
        </refsect1>
      </refentry>
