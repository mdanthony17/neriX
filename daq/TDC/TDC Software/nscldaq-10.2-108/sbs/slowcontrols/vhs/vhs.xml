<!-- chapter utilities -->
<chapter id='util.vhssbs'>
    <title>VHS-40xxx SBS support.</title>
    <para>
         The iSeg VHS-40xxx family of modules implement VME four channel high
         voltage bias supply modules.  THese modules can be controlled by the
         slow controls software via the SBS PCI/VME bus bridget controller.
         This chapter gives an overview of this support.  Reference material
         provides detailed information.
    </para>
    <para>
        Support for the module comes in two Tcl packages and a complete Tcl/Tk
        application:
    </para>
    <variablelist>
        <varlistentry>
            <term><link linkend='manpage.vhs'>iSegVhs</link></term>
            <listitem>
                <para>
                    Provides a tcl package forlow level support fo the
                    modules including
                    the ability to program the base address of the module.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><link linkend='manpage.vhswidgets'>VhsWidgets</link></term>
            <listitem>
                <para>
                    Provides a tcl package that supplies a set of widgets that
                    view and control aspects of the device.  Each widget
                    provides access to some element of the device,  a channel,
                    environmental information or status information about the
                    module.
                </para>
                <para>
                    This separation allows you to build custom applications
                    with a flexible layout of the VHS user interface
                    elements.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><link linkend='manpage.vhspanel'>vhsPanel</link></term>
            <listitem>
                <para>
                    Provides a canned application that allows you to control
                    and view a VHS404 module.
                </para>
            </listitem>
        </varlistentry>
    </variablelist>
    <para>
        Packages are used like any other Tcl package.  Ensure that the
        <filename>TclLibs</filename> directory of the nscldaq installation is
        in your Tcl search path and use the <command>package require</command>
        Tcl command.
    </para>
    <para>
        Assuming an environment variable named <literal>DAQROOT</literal>
        is defined, that point to the top level directory of the NSCLDAQ
        installation, you can add this directory to the search path either by
        defining the <literal>TCLLIBPATH</literal> environment variable (e.g. in login
        scripts):
        <informalexample>
            <programlisting>
export TCLLIBPATH="$TCLLIBPATH $DAQROOT/TclLibs"
            </programlisting>
        </informalexample>
        or by adding it to the <varname>auto_path</varname> Tcl variable in your
        script:
        <informalexample>
            <programlisting>
lappend auto_path [file join $::env(DAQROOT) TclLibs]
            </programlisting>
        </informalexample>
    </para>
    <para>
        Once the package auto-load path has been extended e.g.:
        <informalexample>
            <programlisting>
package require iSegVhs       
            </programlisting>
        </informalexample>
        loads the base module support package.
    </para>
    
</chapter>
<!-- /chapter -->

<!-- manpage 3tcl -->

<refentry id="manpage.vhs">
  <refmeta>
     <refentrytitle>iSegVhs</refentrytitle>
     <manvolnum>3tcl</manvolnum>
  </refmeta>
  <refnamediv>
     <refname>vhs</refname>
     <refpurpose>SBS support for VHS 404 modules.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
<cmdsynopsis>
<command>
package require iSegVhs
</command>
</cmdsynopsis>
    <cmdsynopsis>
    <command>
set <replaceable>name</replaceable>[vhs create <replaceable>?options?</replaceable>]
    </command>
    </cmdsynopsis>
<cmdsynopsis>
<command>
<replaceable>name methodname parameters</replaceable>
</command>
</cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
        Provides support for the VHS 404 module.  The base address of the module
        is determined in two ways.  There is an address jumper, which, if installed
        places the module at <literal>0x4000</literal> in VME short IO space.
        When the jumper is installed, the base address can be programmed
        for the next time the module will be powered up with the jumper removed.
        See the <command>setModuleBaseAddress</command> method to program this
        address
     </para>
     <para>
        The general strategy for using a new module is to first install it into
        a crate with the address jumper installed, set a new address and then
        remove the jumper and use the module in production at the new set address.
        The module is accessed via this package by creating an object for
        the module and then handing that object method calls which manipulate
        the actual module.
     </para>
     
  </refsect1>
  <refsect1>
    <title>OPTIONS</title>
    <para>
        The <option>-base</option> can be supplied  on the <literal>create</literal>
        to set the
        base address of the module.  If not supplied, the module is assumed to
        have the address jumper installed and will be accessed at <literal>0x4000</literal>
    </para>
  </refsect1>
    <refsect1>
        <title>METHODS</title>
        <variablelist>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getModuleStatus</command></term>
                <listitem>
                    <para>
                        Returns a list of the bits in the module status register
                        that are not in the normal state.  These bits will
                        appear as textually named items in the Tcl list
                        returned by this command:
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term><literal>TempBad</literal></term>
                            <listitem>
                                <para>
                                    Module Temperature is bad (too hot)
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>SupplyBad</literal></term>
                            <listitem>
                                <para>
                                    Module power supply has bad voltage.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>ModuleBadState</literal></term>
                            <listitem>
                                <para>
                                    Module is in a bad state.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>EventActive</literal></term>
                            <listitem>
                                <para>
                                    An event is active with the mask set.
                                    See <methodname>getChannelEventMask</methodname>
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>SafetyLoopOpen</literal></term>
                            <listitem>
                                <para>
                                    The module safety loop is open.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>Ramping</literal></term>
                            <listitem>
                                <para>
                                    HV Ramp is in progress.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>Failed</literal></term>
                            <listitem>
                                <para>
                                    Module has failed in some way.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> killEnable ?on|off?</command></term>
                <listitem>
                    <para>
                        If the module has a parameter it must be one of
                        <literal>on</literal> or <literal>off</literal>.
                        That parameter describes the new state of the module
                        kill enable bit.  If the parameter is not supplied,
                        the kill enable bit status is not modified.
                        Regardless, the new state of the kill enalbe bit
                        is returned as <literal>true</literal> or
                        <literal>false</literal>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> fineAdjust ?on|off?</command></term>
                <listitem>
                    <para>
                        Enables or diables the fine adjustment to regulate
                        in the presence of temperature induced drift.  This
                        should probably always be enabled.
                    </para>
                    <para>
                        If the method is given a parameter it should be a
                        value of <literal>on</literal> or <literal>off</literal>
                        which sets the new state of the fine adjust bit.
                        If not supplied, the bit is not modified.
                    </para>
                    <para>
                        Regardless, the final state of the bit is returned
                        as a boolean.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> clearkill</command></term>
                <listitem>
                    <para>
                        Clears the kill conditions in all of the channels.
                        this method does not return anything meaningful.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> haveTempNoGoodEvent</command></term>
                <listitem>
                    <para>
                        Returns <literal>true</literal> if the module
                        has a pending bad temperature event.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> haveSupplyNotGoodEventg</command></term>
                <listitem>
                    <para>
                        Returns <literal>true</literal> if the module has a pending
                        power supply no good event.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> haveSafetyLoopOPenEvent</command></term>
                <listitem>
                    <para>
                        Returns true if there's a safety loop open event pending.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> clearTempNoGoodEvent</command></term>
                <listitem>
                    <para>
                        If the temperature bad condition no longer exists, clears the
                        event.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> clearSupplyNotGoodEvent</command></term>
                <listitem>
                    <para>
                        If the power supply bad condition no longer exists, clears
                        the event.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> clearSafetyLoopOpen</command></term>
                <listitem>
                    <para>
                        If the safety loop is no longer open, clears the latched
                        event.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> eventMask</command></term>
                <listitem>
                    <para>
                        Returns a list containing the set of bits that are
                        set in the event mask.  The event mask determines which
                        events set the <literal>EventActive</literal> event in
                        the module status register.  If an event is masked it
                        will set that bit.  
                    </para>
                    <para>
                        The command result is a list (possibly empty) whose
                        values determine which bits are set in the mask register:
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term><literal>EnableTemperatureEvent</literal></term>
                            <listitem>
                                <para>
                                    If set temperature events will set the
                                    <literal>EventActive</literal> bit in the
                                    module status register.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>EnablePowerEvent</literal></term>
                            <listitem>
                                <para>
                                    If present, power events will set the
                                    <literal>EventActive</literal> bit of
                                    the module status register.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>EnableSafetyLoopEvent</literal></term>
                            <listitem>
                                <para>
                                    If set Safety loop opene vents will set
                                    the <literal>EventActive</literal> bit
                                    of the status register.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> allowTemperatureEvent ?on | off?</command></term>
                <listitem>
                    <para>
                        Enables or disables the reporting of a temperature
                        error as an event in the module status register.
                        If no on/off parameter is present, no change is made
                        to the reporting state. Regardless the reporting state
                        is returned as the command value.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> allowPowerEvent ?on | off?</command></term>
                <listitem>
                    <para>
                        Enables or disables the posting of a power event to
                        the module status register depending on the value of
                        the last command word.  If there is no on/off command
                        parameter, no change is made.  Regardless, the reporting
                        state is returned as the command value.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> allowSafetyEvent ?on|off?</command></term>
                <listitem>
                    <para>
                        Enables of disables the posting of a safety loop open event
                        tothe module status register depending on the value of the
                        last command word.  If there is no on/off command
                        parameter, no change is made.  Regardless, the reporting
                        state is returned as the command value.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getChannelsWithEvents</command></term>
                <listitem>
                    <para>
                        Returns a possibly empty list of the channel numbers that
                        have posted events pending.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getEventEnabledChannels</command></term>
                <listitem>
                    <para>
                        Returns a list (possibly empty) of the set of channels
                        that have event reporting enabled.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> maskChannelEvents <replaceable>mask</replaceable></command></term>
                <listitem>
                    <para>
                        Sets the module event mask.   Each bit in the mask represents
                               a channel.  Set bits enable the channel to produce events.
                               Channel 0 is the lsb etc.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> setRampSpeed <replaceable>pct</replaceable></command></term>
                <listitem>
                    <para>
                        Sets the voltage ramp speed in percentage of target voltage.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getRampSpeed</command></term>
                <listitem>
                    <para>
                        Returns the ramp speed in percentage of the target voltage.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getVoltageLimit</command></term>
                <listitem>
                    <para>
                        Returns the voltage limit (in absolute volts  - this is different
                        from just getting the contents of the VoltageMax register.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getCurrentLimit</command></term>
                <listitem>
                    <para>
                        Returns the current limit (mA).  Note this is different
                        from returning the CurrentMax register.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> get5VLevel</command></term>
                <listitem>
                    <para>
                        Returns the 5V power supply value in volts.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getP12VLevel</command></term>
                <listitem>
                    <para>
                        Returns the +12V power supply level in volts.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getN12VLevel</command></term>
                <listitem>
                    <para>
                        Returns the -12V power supply level in volts.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getAmbientTemperature</command></term>
                <listitem>
                    <para>
                        Returns the temperture at the onboard temperature
                        sensor in degrees C.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> serialNumber</command></term>
                <listitem>
                    <para>
                        Returns the module serial number.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> firmwareVersion</command></term>
                <listitem>
                    <para>
                        Returnst the version of the firmware as
                        <literal>a.b.c.d</literal>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> channelCount</command></term>
                <listitem>
                    <para>
                        Returns the number of channels the board has.
                        This assumes the channels are stuffed contiguously
                        from channel 0 upwards
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getChannelStatus
                        <replaceable>n</replaceable></command></term>
                <listitem>
                    <para>
                         Returns a list of the bits that are set channel n's
                                status register.  Note that if channel n does not
                                exist,
                                an error is raised.  The bit names in the list
                                returned are:
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term><literal>VoltageLimit</literal></term>
                            <listitem><para>Exceeded voltage limit.</para></listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>CurrentLimit</literal></term>
                                <listitem><para>Exceeded current limit.</para>
                                </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>Tripped</literal></term>
                            <listitem><para>Current tripped.</para></listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>ExternalInhibit</literal></term>
                            <listitem><para>External inhibit set</para></listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>VoltageBounds</literal></term>
                            <listitem><para>Exceeded voltage bounds (regulation).</para></listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>CurrentBounds</literal></term>
                            <listitem><para>Exceeded current bounds regulation)</para></listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>VoltageControlled</literal></term>
                            <listitem><para>Voltage control is active.</para></listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>CurrentControlled</literal></term>
                            <listitem><para>Current control is active</para></listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>EmergencyOff</literal></term>
                            <listitem><para>Emergency shutdown performed.</para></listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>On</literal></term>
                            <listitem><para>Channel is on.</para></listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>RampEnded</literal></term>
                            <listitem><para>Channel Finished a ramp.</para></listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>InputError</literal></term>
                            <listitem><para>Input error</para></listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>TurnedOffEvent</literal></term>
                            <listitem>
                                <para>
                                    Channel off event becausem module was turned
                                    off.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> resetChannelEvents
                <replaceable>n mask</replaceable></command></term>
                <listitem>
                    <para>
                        Resets any events that are set on channel
                        <parameter>n</parameter>.  The events reset are
                        specified by a logical or of the bits:
                        <informalexample>
                            <programlisting>
vhs::ChannelEventVoltageLimit
vhs::ChannelEventCurrentLimit
vhs::ChannelEventTrip        
vhs::ChannelEventInhibit     
vhs::ChannelEventVoltageBounds
vhs::ChannelEventCurrentBounds
vhs::ChannelEventControlledVoltage
vhs::ChannelEventControlledCurrent
vhs::ChannelEventEmergencyOff     
vhs::ChannelEventRampEnded        
vhs::ChannelEventEventOnOff       
vhs::ChannelEventInputError
                            </programlisting>
                        </informalexample>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable>
                getChannelEventMask <replaceable>n</replaceable></command></term>
                <listitem>
                    <para>
                        Returns a list of the events for channel
                        <parameter>n</parameter> that are masked.  The list
                        has the same format as the list from
                        <methodname>getChannelEvents</methodname>, however
                        the bits in the list are those which are set in the
                        mask register.
                    </para>
                </listitem>
            </varlistentry>
            
            <varlistentry>
                <term><command><replaceable>name</replaceable>
                setChanneEventMask <replaceable>n bitlist</replaceable></command></term>
                <listitem>
                    <para>
                        Sets the channel event mask register associated with
                        channel number <parameter>n</parameter>.
                        <parameter>bitlist</parameter> has the same format as for
                        <methodname>getChannelEvents</methodname>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getChannelVoltage
                <replaceable>n</replaceable></command></term>
                <listitem>
                    <para>
                        Returns the voltage set point for channel n. Note that this
                        may not be the actual voltage, and may not even be the
                        desired voltage (if the HV is off). See
                        e.g. <methodname>getMeasuredVoltage</methodname> to
                        retrieve the actual voltage.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable>
                setChannelVoltage <replaceable>n v</replaceable></command></term>
                <listitem>
                    <para>
                        Sets the voltage set point of chanel <parameter>n</parameter>
                        to <parameter>v</parameter> volts.  Note that
                        unless the HV is on, and the channel is able ramp this will
                        not actually change the voltage asserted on the module
                        connectors.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getMeasuredVoltage
                <replaceable>n</replaceable></command></term>
                <listitem>
                    <para>
                        Returns the voltage that is currently asserted on the
                        channel <parameter>n</parameter> connector.
                        The result is in volts.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable>
                getMeasuredCurrent <replaceable>n</replaceable></command></term>
                <listitem>
                    <para>
                        Returns the current measured for channel
                        <parameter>n</parameter> in milliamps.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getChannelCurrentTrip
                <replaceable>n</replaceable></command></term>
                <listitem>
                    <para>
                        Returns the channel <parameter>n</parameter>
                        current trip point in milliamps.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> setChannelCurrentTrip
                <replaceable>n i</replaceable></command></term>
                <listitem>
                    <para>
                        Sets the desired over current trip point for channel
                        <parameter>n</parameter> to <parameter>i</parameter>
                        milliamps.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> getVoltageBounds
                <replaceable>n</replaceable></command></term>
                <listitem>
                    <para>
                        Returns the regulation tolerance for voltage regulation
                        for channel <parameter>n</parameter>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> setVoltageBounds
                <replaceable>n v</replaceable></command></term>
                <listitem>
                    <para>
                        Sets the regulation tolerance for channel
                        <parameter>n</parameter> to be <parameter>v</parameter>
                        volts.  This value (<parameter>v</parameter>)
                        will be returned in subsequent
                        calls to <methodname>getVoltageBounds</methodname>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> setAllVoltages
                <replaceable>v</replaceable></command></term>
                <listitem>
                    <para>
                        Sets the requested voltage (setpoint) for all
                        channels to the common value <parameter>v</parameter>
                        volts.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> setAllCurrentTrips
                <replaceable>i</replaceable></command></term>
                <listitem>
                    <para>
                        Sets the current trip point to <parameter>i</parameter>
                        milliamps for all channels.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable>
                setAllVoltageBounds <replaceable>v</replaceable></command></term>
                <listitem>
                    <para>
                        Sets the regulation bound voltages for all channels
                        to <parameter>v</parameter>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable>
                setAllCurrentBounds <replaceable>i</replaceable></command></term>
                <listitem>
                    <para>
                        Sets the current regulation bounds for all channels
                        to the common value of <parameter>i</parameter> millivolts.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> emergencyOffAll</command></term>
                <listitem>
                    <para>
                        Shutds down all channels without a ramp.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> onAll</command></term>
                <listitem>
                    <para>
                        Turns on all channels and ramps them to their set point
                        voltages.  The ramps will continue until either the set
                        point is reached or channels trip.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> offAll</command></term>
                <listitem>
                    <para>
                        Ramps all channels down and turns off their HV.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command><replaceable>name</replaceable> setModuleBaseAddress
                <replaceable>newBase</replaceable></command></term>
                <listitem>
                    <para>
                        If the module address jumper is install,s ets the module's
                        new base address.  This base address becomes effective
                        the next time the module is powered up with the
                        base address jumper removed.  It is not clear what happens
                        if this function is called whent he address jumper
                        is not installed.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect1>
  <refsect1>
     <title>SEE ALSO</title>
     <para>
        <link linkend='manpage.vhswidgets'>VhsWidgets(3tcl)</link>
        <link linkend='manpage.vhspanel'>vhsPanel(1tcl)</link>
     </para>
  </refsect1>

</refentry>
<refentry id="manpage.vhswidgets">
  <refmeta>
     <refentrytitle>VhsWidgets</refentrytitle>
     <manvolnum>3tcl</manvolnum>
  </refmeta>
  <refnamediv>
     <refname>VhsWidgets</refname>
     <refpurpose>User interface components for VHS 404 power supplies.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
    <command>
package require VhsWidgets
    </command>
    </cmdsynopsis>
<cmdsynopsis>
<command>
set <replaceable>name</replaceable> [VhsWidgets::environment create ?options?]
</command>
</cmdsynopsis>
<cmdsynopsis>
<command>
set <replaceable>name</replaceable> [VhsWidgets::channel create ?options?]
</command>
</cmdsynopsis>
<cmdsynopsis>
<command>
set <replaceable>name</replaceable> [VhsWidgets::channelStatus ?options?]
</command>
</cmdsynopsis>
<cmdsynopsis>
<command>
<replaceable>name</replaceable> method <replaceable>parameters...</replaceable>
</command>
</cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
        This package contains a set of widgets that allow Tcl/Tk programmers
        to construct control panels for the iSeg VHS 404 and similar modules.
        See as well, <link linkend='manpage.vhqpanel'>vhqPanel(1tcl)</link>
        for one such panel.
     </para>
     <para>
        Three widgets are included.  <classname>VhsWidgets::environment</classname>
        provides a display of the environment of the board as sensed by the
        onboard sensors.  This widget includes a display of the power on board
        power supply sensors as well as the temperature sensor.
        <classname>VhsWidgets::channel</classname> provides a voltage and
        current meter as well as the ability set the voltage set points, the
        currentl limits to initiate ramps and to kill the channel.
        Finally <classname>VhsWidgets::channelStatus </classname> provides
        access to the stauts and events in the modules as well as the ability
        to attempt a reset of interlocking events and status bits.
     </para>
     <para>
        In general a complete control panel will require the use of all of these
        widgets. The separation of these widgets provides the programmer with
        increased flexibility in control panel layout.
     </para>
  </refsect1>
  <refsect1>
    <title>OPTIONS</title>
    <para>
        Each widget has its owns set of options although they all support and
        require the <option>-device</option> option whose parameter is an
        object that was botten by creating a <classname>vhs</classname> object.
        All widgets will also accept any option that is recognized by the
        Tk frame widget and pass that option on to the top level frame that
        enapsulates the megawidget.
    </para>
    <refsect2>
        <title>VhsWidgets::environment options</title>
        <para>This widget only supports the <option>-device</option> option.
        This option is mandatory.
        </para>
    </refsect2>
    <refsect2>
        <title>VhsWidgets::channel</title>
        <para>
            In addition to the mandatory <option>-device</option> option,
            this widget supports the following options:
        </para>
        <variablelist>
            <varlistentry>
                <term><option>-channel</option> <parameter>n</parameter></term>
                <listitem>
                    <para>
                        Indicates the wiget should monitor channel
                        <parameter>n</parameter> this parameter can
                        be dynamically modified after widget creation.
                        The default, if this option is not
                        specified is to monitor channel 0.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>-statuscommand</option> <replaceable>script</replaceable></term>
                <listitem>
                    <para>
                        The user interface features a status button that
                        monitors the state ofthe channel.  This button is colored
                        green if there are no faults and red if there are faults.
                        The script specified here will be executed when this
                        button is clicked.
                    </para>
                    <para>
                        On use of this button in a control panel application
                        might be to display a
                        <classname>VhsWidgets::channelStatus</classname>
                        widget that shows the status of the channel.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect2>
    <refsect2>
        <title>VhsWidgets::channelStatus options</title>
        <para>
            In addition to the <option>-device</option> option which is mandatory
            on creation, this widget supports the <option>-channel</option>
            option whose parameter specifies the specific channel to monitor/control.
            If not supplied this defaults to 0.  The channel can be dynamically
            modified using the <methodname>configure</methodname> method.
        </para>
    </refsect2>
  </refsect1>
  <refsect1>
    <title>OBJECT METHODS</title>
    <para>
        All of the widgets in this package support a single method;
        <methodname>update</methodname> that refreshes the display from the
        device.  In normal control applications this is hooked to a recurring
        timer via code like:
    </para>
    <example>
        <title>Hooking update methods to recurring timer</title>
        <programlisting>
proc updateVhs {interval widget} {
    $widget update
    after $interval "updateVhs $interval $widget"
}
...
updateVhs 1000 $someWidget;  #   update every second.
        </programlisting>
    </example>
  </refsect1>
  <refsect1>
     <title>SEE ALSO</title>
     <para>
        <link linkend='manpage.vhs'>vhs(3tcl)</link>
        <link linkend='manpage.vhspanel'>vhsPanel(1tcl)</link>
     </para>
  </refsect1>

</refentry>

<!-- /manpage -->

<!-- manpage 1tcl -->
<refentry id="manpage.vhspanel">
  <refmeta>
     <refentrytitle>vhsPanel</refentrytitle>
     <manvolnum>1tcl</manvolnum>
  </refmeta>
  <refnamediv>
     <refname>vhsPanel</refname>
     <refpurpose>Canned VHS Control panel</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
    <command>
vhsPanel <replaceable><optional>base</optional></replaceable>
    </command>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
        <command>vhsPanel</command> provides a prepackaged  control panel
        for the VHS module.  The <replaceable>base</replaceable> command
        line parameter selects the base address of the module being
        controlle/displayed.  <replaceable>base</replaceable> is optional and
        if omitted defaults to <literal>0x4000</literal>.
     </para>
     <para>
        The user interface of the software looks like a tabbed notebook.
        The front page of the notebook summarizes the status of all of the
        module's channels.  There are detailed pages for each channel, and for
        the various status/environmentald displays.
     </para>
     <para>
        Below the tabbed notebook, a button allows you to attemp to reset
        interlock conditions.
     </para>
     <para>
        A menubar includes a <literal>File</literal> menu which allows you to save
        and restore module settings.
     </para>
  </refsect1>
  <refsect1>
     <title>SEE ALSO</title>
     <para>
        <link linkend='manpage.vhs'>vhs(3tcl)</link>
        <link linkend='manpage.vhswidgets'>vhsWidgets(3tcl)</link>
     </para>
  </refsect1>

</refentry>
<!-- /manpage -->
