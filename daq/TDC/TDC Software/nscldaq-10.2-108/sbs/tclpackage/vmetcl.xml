<!-- chapter commands -->

<chapter id="vmetclintro">
    <title>Tcl access to the VME via the SBS interface</title>
    <para>
        The NSCL uses the Tcl/Tk scripting language to provide user interfaces
        and high level logic when speed is not critical.  This chapter descdribes
        a Tcl loadable package that provides access to VME crates attached to
        data takings systems via the SBS fiber optic interface.
        </para>
    <para>
        This chapter is divided into the following sections.
        <variablelist>
            <varlistentry>
                <term>Incorporating vmetcl</term>
                <listitem>
                    <para>
                        Describes the environnment variables
                        and script additions you must make to use the
                        VME Tcl package.
                        </para>
                    </listitem>
                </varlistentry>
            <varlistentry>
                <term>Using vmetcl</term>
                <listitem>
                    <para>
                        Provides some samples that illustrate the use of
                        the VME tcl package.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>
    <para>
        For detailed reference information on the Vme Tcl package start with
        <link linkend="manpage.vmetcl">the vmetcl manpage</link>.
        </para>
          
    <section>
        <title>Incorporating Vme Tcl in your scripts</title>
        <para>
            In order to describe this for laboratories that have made different
            installation choices than the NSCL, we will assume the existence of
            an environment variable <literal>DAQROOT</literal> which points to
            the top of the installation tree for nscldaq. Consult with your local
            experts/installers for the value that must be given this variable.
            </para>
        <para>
            The Tcl scripting language supports lodable packages.  This support
            includes support for a directory search path  to satisfy a package
            load request.  This search path can be set either via the
            <literal>TCLLIBPATH</literal> environment variable, which is a
            space separated list of directories to search, or by manipulating the
            <varname>auto_path</varname> script global variable.
            </para>
        <para>
            The following bash shell script fragment appends the NSCLDAQ Tcl
            package repository to any existing <literal>TCLLIBPATH</literal>
            definition.
            </para>
        <example>
            <title>Appending the NSCLDAQ Tcl Package repository to Tcl's search
            path</title>
            <programlisting>
export TCLLIBPATH="$TCLLIBPATH $DAQROOT/TclLibs"
                </programlisting>
            </example>
        <para>
            This can also be done at the script level:
            </para>
        <example>
            <title>Appending NSLCDAQ's TclPackage repository to Tcl's search path</title>
            <programlisting>
global env         # Needed if in a proc.
lappend auto_path [file join $env(DAQROOT) TclLibs]
                </programlisting>
            </example>
        <para>
            Regardless of the method you use to add the NSCDAQ Tcl package
            repostory to the Tcl package search list, you must explicitly
            request the package from your script as follows:
            </para>
        <example>
            <title>Requesting the VME Tcl package be loaded.</title>
            <programlisting>
package require Vme
                </programlisting>
            </example>
        </section>
    <section>
        <title>Sample programs that use the package</title>
        <para>
            The following short program probes VME crate 0 for
            all HYTEC 2530 ADC modules.  It uses the fact that offset 2 in the
            register space of these modules is a 16 bit register that contains the
            value <literal>2530</literal>:
            </para>
        <example>
            <title>Using VME Tcl to locate all 2530 modules</title>
            <programlisting>

lappend auto_path [file join $env(DAQROOT) TclLibs]
package require Vme

# is there an ADC at 'base'?

proc is2530 {base {name hytec}} {
    vme create $name -device standard $base 256
    $value = [$name get -l 2]
    vme delete $name
    return [expr $value == 2530]
}

#  Main program.

set modules [list]
for {set base 0} {$base &lt; $f80000} {incr base 0x080000} {
    if  {[is2530 $base]} {
        lappend modules $base
    }
}

if {[llength $modules] > 0} {
    puts "Found Hytec 2530 modules at: "
    foreach addr $modules {
        puts [format %0x6 $addr]
    }
} else {
    puts "No HYTEC 2530 modules found."
}
                </programlisting>
            </example>
        
        </section>
    </chapter>

<!-- /chapter -->

<!-- manpage 1tcl -->
<refentry id="manpage.vmetcl">
  <refmeta>
     <refentrytitle>SBS Vme Tcl package</refentrytitle>
     <manvolnum>1tcl</manvolnum>
  </refmeta>
  <refnamediv>
     <refname>vme</refname>
     <refpurpose>Provide access to VME crates to Tcl scripts.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
    <command>
vme create <replaceable>mapname</replaceable> ?options? <replaceable>base</replaceable> <replaceable>size</replaceable>
    </command>
    </cmdsynopsis>
<cmdsynopsis>
    <command>
vme delete <replaceable>mapname</replaceable>
    </command>
</cmdsynopsis>
<cmdsynopsis>
    <command>
vme list
    </command>
</cmdsynopsis>
<cmdsynopsis>
    <command>
<replaceable>name</replaceable> get -l|-w|-b <replaceable>offset</replaceable>
    </command>
</cmdsynopsis>
<cmdsynopsis>
    <command>
<replaceable>name</replaceable> set -l|-w|-b <replaceable>offset value</replaceable>
    </command>
</cmdsynopsis>



  </refsynopsisdiv>
  <refsect1>
    <title>DESCRIPTION</title>
    <para>
        The <command>vme</command> command allows you to create, destroy and
        list a set of address windows into the VME card crate.  Maps are named
        entities.  When a map is created, the package also creates a command named
        after the map.  This command is then used to access them map via its ensemble
        <command>get</command> and <command>set</command>commands.
    </para>
    <refsect2>
        <title>vme create</title>
        <para>
            Creates a new map.  The <replaceable>mapname</replaceable> parameter
            is the name of the map and, on success, is created as a new command
            that can be used to access them.
            <replaceable>base</replaceable> and <replaceable>size</replaceable>
            define the address window base address and size. 
            </para>
        <para>
            The following options are recognized:
            <variablelist>
                <varlistentry>
                    <term><option>-device</option> <replaceable>type</replaceable></term>
                    <listitem>
                        <para>
                            Defines the address modifier associated with this
                            map.  This should be one of
                            <literal>extended</literal> (32 bit address space),
                            <literal>standard</literal> (24 bit address space),
                            <literal>shortio</literal> (16 bit address space)
                            or <literal>geo</literal> (slot addressing for crates
                            and modules that support this.
                            </para>
                        </listitem>
                    </varlistentry>
                <varlistentry>
                    <term><option>-crate</option> <replaceable>n</replaceable></term>
                    <listitem>
                        <para>
                            Selects a VME crate other than the default crate 0.
                            If not provided this defaults to zero.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
        </refsect2>
    <refsect2>
        <title>vme delete</title>
        <para>
            Deletes an existing map.  All device and driver resources are destroyed.
            The command created to access the map is removed from the interpreter.
            </para>
        </refsect2>
    <refsect2>
        <title>vme list</title>
        <para>
            Lists the set of VME maps defined by this script via this package.
            The maps are returned as the command result.  The result is a list
            of two element sublists. Each sublist contains, in order, the name of the map
            and the base address of the map in VME space.
            </para>
        </refsect2>
    <refsect2>
        <title>Map access command</title>
        <para>
            When a VME map is created, the name of the map also becomes a new
            Tcl command.  That command is a command <firstterm>ensemble</firstterm>
            that allows your script to access the address window defined by the
            map.
            </para>
        <para>
            A Tcl command ensemble is a command that has subcommands.  The
            subcommands the map has are <command>get</command> which fetches
            data fromt he address window and <command>put</command> which
            puts data into the address window.
            </para>
        <para>
            The format of the <replaceable>mapname</replaceable> <command>get</command>
            command is:    
            </para>
        <informalexample>
            <cmdsynopsis>
<command><replaceable>mapname</replaceable> get <replaceable>width offset</replaceable>
                </command>
                </cmdsynopsis>
            </informalexample>
        <para>
            THe format of the <replaceable>mapname</replaceable> <command>put</command>
            command is:
            </para>
        <informalexample>
            <cmdsynopsis>
<command><replaceable>mapname</replaceable> put <replaceable>width offset value</replaceable></command>
                </cmdsynopsis>
            </informalexample>
        <para>
            These commands have some common elements.  Specifically, <replaceable>offset</replaceable>
            is a byte offset into the map at which the get or put is performed.
            <replaceable>width</replaceable> is anoption which describes the width of the
            data transfer.  This can be any of:
            <variablelist>
                <varlistentry>
                <term><option>-l</option></term>
                <listitem>
                    <para>
                        Transfer will be of longword (32 bit) width.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-w</option></term>
                    <listitem>
                        <para>
                            Transfer will be of word (16 bit) width.
                            </para>
                        </listitem>
                    </varlistentry>
                <varlistentry>
                    <term><option>-b</option></term>
                    <listitem>
                        <para>
                            Transfer will be of byte (8 bit) width.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
        <para>
            The <parameter>data</parameter> on the <command>put</command>
            subcommand is the data that is actually written to the VME
            bus.  Only the appropriate number of low order bits is used.
            </para>
        </refsect2>
            
  </refsect1>


</refentry>

<!-- /manpage -->